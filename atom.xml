<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Karthik Selvam</title><description/><link>https://karthikselvam.com/</link><language>en</language><copyright>Copyright 2024, Ronalds Vilcins</copyright><lastBuildDate>Fri, 10 May 2024 00:00:00 +0000</lastBuildDate><generator>Hugo - gohugo.io</generator><docs>http://cyber.harvard.edu/rss/rss.html</docs><atom:link href="https://ronaldsvilcins.com/atom.xml" rel="self" type="application/atom+xml"/><item><title>Command Pattern</title><link>https://karthikselvam.com/posts/2024/05/10/command_pattern/</link><description>&lt;ol>
&lt;li>Implement Transaction Management: Extend the Command Pattern implementation to support transaction management. This exercise will involve implementing methods to start, commit, and rollback transactions, where a transaction consists of multiple commands that are executed atomically.&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-java">// Command interface
interface Command {
void execute();
void undo();
}
// Concrete command
class ConcreteCommand implements Command {
private Receiver receiver;
ConcreteCommand(Receiver receiver) {
this.receiver = receiver;
}
public void execute() {
receiver.action();
}
public void undo() {
receiver.undoAction();
}
}
// Receiver
class Receiver {
void action() {
System.out.println(&amp;quot;Receiver is executing action...&amp;quot;);
}
void undoAction() {
System.out.println(&amp;quot;Receiver is undoing action...&amp;quot;);
}
}
// Invoker
class Invoker {
private List&amp;lt;Command&amp;gt; commands = new ArrayList&amp;lt;&amp;gt;();
void addCommand(Command command) {
commands.add(command);
}
void executeCommands() {
for (Command command : commands) {
command.execute();
}
}
void undoCommands() {
for (int i = commands.size() - 1; i &amp;gt;= 0; i--) {
commands.get(i).undo();
}
}
}
// Client
public class Client {
public static void main(String[] args) {
Receiver receiver = new Receiver();
Invoker invoker = new Invoker();
// Start transaction
System.out.println(&amp;quot;Starting transaction...&amp;quot;);
// Add commands to the transaction
invoker.addCommand(new ConcreteCommand(receiver));
invoker.addCommand(new ConcreteCommand(receiver));
invoker.addCommand(new ConcreteCommand(receiver));
// Execute commands
invoker.executeCommands();
// Commit transaction
System.out.println(&amp;quot;Committing transaction...&amp;quot;);
// Start another transaction
System.out.println(&amp;quot;Starting another transaction...&amp;quot;);
// Add commands to the new transaction
invoker.addCommand(new ConcreteCommand(receiver));
invoker.addCommand(new ConcreteCommand(receiver));
// Execute commands
invoker.executeCommands();
// Rollback transaction
System.out.println(&amp;quot;Rolling back transaction...&amp;quot;);
invoker.undoCommands();
}
}
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>Implement Remote Control for Devices: Create a remote control application that allows users to control various devices (e.g., lights, TV, stereo) using the Command Pattern. Each device action (e.g., turning on/off, changing volume) should be encapsulated as a command object.&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-java">
// Receiver
class Light {
void turnOn() {
System.out.println(&amp;quot;Light is on&amp;quot;);
}
void turnOff() {
System.out.println(&amp;quot;Light is off&amp;quot;);
}
}
class TV {
void turnOn() {
System.out.println(&amp;quot;TV is on&amp;quot;);
}
void turnOff() {
System.out.println(&amp;quot;TV is off&amp;quot;);
}
void changeVolume(int volume) {
System.out.println(&amp;quot;TV volume changed to &amp;quot; + volume);
}
}
// Command interface
interface Command {
void execute();
}
// Concrete commands
class LightOnCommand implements Command {
private Light light;
LightOnCommand(Light light) {
this.light = light;
}
public void execute() {
light.turnOn();
}
}
class LightOffCommand implements Command {
private Light light;
LightOffCommand(Light light) {
this.light = light;
}
public void execute() {
light.turnOff();
}
}
class TVOnCommand implements Command {
private TV tv;
TVOnCommand(TV tv) {
this.tv = tv;
}
public void execute() {
tv.turnOn();
}
}
class TVOffCommand implements Command {
private TV tv;
TVOffCommand(TV tv) {
this.tv = tv;
}
public void execute() {
tv.turnOff();
}
}
class TVVolumeCommand implements Command {
private TV tv;
private int volume;
TVVolumeCommand(TV tv, int volume) {
this.tv = tv;
this.volume = volume;
}
public void execute() {
tv.changeVolume(volume);
}
}
// Invoker
class RemoteControl {
private Command command;
void setCommand(Command command) {
this.command = command;
}
void pressButton() {
command.execute();
}
}
// Client
public class RemoteControlClient {
public static void main(String[] args) {
// Create devices
Light light = new Light();
TV tv = new TV();
// Create commands
Command lightOn = new LightOnCommand(light);
Command lightOff = new LightOffCommand(light);
Command tvOn = new TVOnCommand(tv);
Command tvOff = new TVOffCommand(tv);
Command tvVolume = new TVVolumeCommand(tv, 20); // Set initial volume to 20
// Create remote control
RemoteControl remoteControl = new RemoteControl();
// Associate commands with remote control buttons
remoteControl.setCommand(lightOn); // Button 1 turns on the light
remoteControl.pressButton();
remoteControl.setCommand(tvOn); // Button 2 turns on the TV
remoteControl.pressButton();
remoteControl.setCommand(tvVolume); // Button 3 changes TV volume
remoteControl.pressButton();
remoteControl.setCommand(tvOff); // Button 4 turns off the TV
remoteControl.pressButton();
remoteControl.setCommand(lightOff); // Button 5 turns off the light
remoteControl.pressButton();
}
}
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>Implement Undo/Redo functionality: Enhance the Command Pattern implementation to support undo and redo operations. This exercise will require you to maintain a history of executed commands and implement methods to undo and redo commands.&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-java">
import java.util.Stack;
// Receiver
class Light {
void turnOn() {
System.out.println(&amp;quot;Light is on&amp;quot;);
}
void turnOff() {
System.out.println(&amp;quot;Light is off&amp;quot;);
}
}
// Command interface
interface Command {
void execute();
void undo();
}
// Concrete commands
class LightOnCommand implements Command {
private Light light;
LightOnCommand(Light light) {
this.light = light;
}
public void execute() {
light.turnOn();
}
public void undo() {
light.turnOff();
}
}
class LightOffCommand implements Command {
private Light light;
LightOffCommand(Light light) {
this.light = light;
}
public void execute() {
light.turnOff();
}
public void undo() {
light.turnOn();
}
}
// Invoker
class RemoteControl {
private Stack&amp;lt;Command&amp;gt; undoStack = new Stack&amp;lt;&amp;gt;();
private Stack&amp;lt;Command&amp;gt; redoStack = new Stack&amp;lt;&amp;gt;();
void executeCommand(Command command) {
command.execute();
undoStack.push(command);
redoStack.clear(); // Clear redo stack when a new command is executed
}
void undo() {
if (!undoStack.isEmpty()) {
Command command = undoStack.pop();
command.undo();
redoStack.push(command);
} else {
System.out.println(&amp;quot;Nothing to undo&amp;quot;);
}
}
void redo() {
if (!redoStack.isEmpty()) {
Command command = redoStack.pop();
command.execute();
undoStack.push(command);
} else {
System.out.println(&amp;quot;Nothing to redo&amp;quot;);
}
}
}
// Client
public class RemoteControlClient {
public static void main(String[] args) {
// Create devices
Light light = new Light();
// Create commands
Command lightOn = new LightOnCommand(light);
Command lightOff = new LightOffCommand(light);
// Create remote control
RemoteControl remoteControl = new RemoteControl();
// Execute commands
remoteControl.executeCommand(lightOn); // Turn on the light
remoteControl.executeCommand(lightOff); // Turn off the light
// Undo the last command
remoteControl.undo(); // Should turn on the light
// Redo the last undone command
remoteControl.redo(); // Should turn off the light
}
}
&lt;/code>&lt;/pre></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2024/05/10/command_pattern/</guid><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate></item><item><title>Scaling Databases</title><link>https://karthikselvam.com/posts/2024/05/02/scaling_db/</link><description>&lt;p>Storage services are stateful services. Compared to stateless services, stateful services have mechanisms to ensure consistency and require redundancy to avoid data loss. A stateful service may choose mechanisms like Paxos for strong consistency or eventual consistency mechanisms. These are complex decisions, and tradeoffs have to be made, which depend on the various requirements like consistency, complexity, security, latency, and performance. This is one reason we keep all services stateless as much as possible and keep state only in stateful services.&lt;/p>
&lt;p>Another reason is that if we keep state in individual hosts of a web or backend service, we will need to implement sticky sessions, consistently routing the same user to the same host. We will also need to replicate the data in case a host fails and handle failover (such as routing the users to the appropriate new host when their host fails). By push- ing all states to a stateful storage service, we can choose the appropriate storage/data- base technology for our requirements, and take advantage of not having to design, implement, and make mistakes with managing state.&lt;/p>
&lt;p>Storage can be broadly classified into the following.&lt;/p>
&lt;ul>
&lt;li>SQL : Has relational characteristics such as tables and relationships between tables, including primary keys and foreign keys. SQL must have ACID properties.&lt;/li>
&lt;li>NoSQL: A database that does not have all SQL properties.&lt;/li>
&lt;li>Column oriented database : Organizes data into columns instead of rows for efficient filtering. Examples are Cassandra and HBase.&lt;/li>
&lt;li>Keyvalue store : Data is stored as a collection of key-value pairs. Each key corresponds to a disk location via a hashing algorithm. Read performance is good. Keys must be hashable, so they are primitive types and cannot be pointers to objects. Values don’t have this limitation; they can be primitives or pointers. Key-value databases are usually used for caching, employing various techniques like Least Recently Used (LRU). Cache has high performance but does not require high availability (because if the cache is unavailable, the requester can query the original data source). Examples are Memcached and Redis.&lt;/li>
&lt;li>Document store : Can be interpreted as a key-value database where values have no size limits or much larger limits than key-value databases. Values can be in various formats. Text, JSON, or YAML are common. An example is MongoDB. - Graph Database : Designed to efficiently store relationships between entities. Examples are Neo4j, RedisGraph, and Amazon Neptune.&lt;/li>
&lt;li>File storage : Data stored in files, which can be organized into directories/folders. We can see it as a form of key-value, with path as the key.&lt;/li>
&lt;li>Block storage : Stores data in evenly sized chunks with unique identifiers. We are unlikely to use block storage in web applications. Block storage is relevant for designing low-level components of other storage systems (such as databases).&lt;/li>
&lt;li>Object storage : Flatter hierarchy than file storage. Objects are usually accessed with simple HTTP APIs. Writing objects is slow, and objects cannot be modified, so object storage is suited for static data. AWS S3 is a cloud example.&lt;/li>
&lt;/ul></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2024/05/02/scaling_db/</guid><pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate></item><item><title>Non Functional Requirements</title><link>https://karthikselvam.com/posts/2024/05/01/non_functional_requirements/</link><description>&lt;p>A system has functional and non-functional requirements. Functional requirements describe the inputs and outputs of the system. You can represent them as a rough API specification and endpoints.&lt;/p>
&lt;p>Non-functional requirements refer to requirements other than the system inputs and outputs. Typical non-functional requirements include the following&lt;/p>
&lt;ol>
&lt;li>Scalability—The ability of a system to adjust its hardware resource usage easily and with little fuss to cost-efficiently support its load. The process of expanding to support a larger load or number of users is called scal- ing. Scaling requires increases in CPU processing power, RAM, storage capacity, and network bandwidth.Scaling can refer to vertical scaling or horizontal scaling.&lt;/li>
&lt;/ol>
&lt;p>Vertical scaling is conceptually straightforward and can be easily achieved just by spending more money. It means upgrading to a more powerful and expensive host, one with a faster processor, more RAM, a bigger hard disk drive, a solid-state drive instead of a spinning hard disk for lower latency, or a network card with higher bandwidth.&lt;/p>
&lt;p>There are three main disadvantages of vertical scaling.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>We will reach a point where monetary cost increases faster than the upgraded hardware’s performance. For example, a custom mainframe that has multiple proces- sors will cost more than the same number of separate commodity machines that have one processor each.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Vertical scaling has technological limits. Regardless of budget, current technological limitations will impose a maximum amount of processing power, RAM, or storage capacity that is technologically possible on a single host.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Vertical scaling may require downtime. We must stop our host, change its hardware and then start it again. To avoid downtime, we need to provision another host, start our service on it, and then direct requests to the new host. Moreover, this is only possible if the service’s state is stored on a different machine from the old or new host.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Horizontal scaling refers to spreading out the processing and storage requirements across multiple hosts. “True” scalability can only be achieved by horizontal scaling.&lt;/p>
&lt;ul>
&lt;li>Stateless and stateful services&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>HTTP is a stateless protocol, so a backend service that uses it is easy to scale horizontally&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Availability - Availability is the percentage of time a system can accept requests and return the desired response.&lt;/li>
&lt;/ol></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2024/05/01/non_functional_requirements/</guid><pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate></item><item><title>Linked List</title><link>https://karthikselvam.com/posts/2024/04/22/linked_list/</link><description>&lt;p>In this article, we will solve linked list related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. &lt;a href="https://leetcode.com/problems/reverse-linked-list/">Reverse Linked List&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public class Solution {
public ListNode reverseList(ListNode head) {
ListNode prev = null;
ListNode current = head;
while (current != null) {
ListNode nextTemp = current.next;
current.next = prev;
prev = current;
current = nextTemp;
}
return prev; // prev now points to the new head of the reversed list
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the linked list.The algorithm iterates through each node of the linked list once. The time complexity is directly proportional to the number of nodes in the list&lt;/p>
&lt;p>Space complexity: O(1) The iterative approach uses a constant amount of extra space regardless of the size of the input linked list. We only use a few extra pointers (prev, current, nextTemp) to perform the reversal in place, hence the space complexity is constant.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. &lt;a href="https://leetcode.com/problems/merge-two-sorted-lists/">Merge Two Sorted Lists&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
final ListNode root = new ListNode();
ListNode prev = root;
while (list1 != null &amp;amp;&amp;amp; list2 != null) {
if (list1.val &amp;lt; list2.val) {
prev.next = list1;
list1 = list1.next;
} else {
prev.next = list2;
list2 = list2.next;
}
prev = prev.next;
}
prev.next = list1 != null ? list1 : list2;
return root.next;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the linked list.The algorithm iterates through each node of the linked list once. The time complexity is directly proportional to the number of nodes in the list&lt;/p>
&lt;p>Space complexity: O(1) The iterative approach uses a constant amount of extra space regardless of the size of the input linked list. We only use a few extra pointers (prev, root) to perform the reversal in place, hence the space complexity is constant.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/reorder-list/">Reorder List&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public void reorderList(ListNode head) {
//Find middle of list using a slow and fast pointer approach
ListNode slow = head;
ListNode fast = head.next;
while (fast != null &amp;amp;&amp;amp; fast.next != null) {
slow = slow.next;
fast = fast.next.next;
}
//Reverse the second half of the list using a tmp variable
ListNode second = slow.next;
ListNode prev = slow.next = null;
while (second != null) {
ListNode tmp = second.next;
second.next = prev;
prev = second;
second = tmp;
}
//Re-assign the pointers to match the pattern
ListNode first = head;
second = prev;
while (second != null) {
ListNode tmp1 = first.next;
ListNode tmp2 = second.next;
first.next = second;
second.next = tmp1;
first = tmp1;
second = tmp2;
}
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the linked list.The algorithm iterates through each node of the linked list once. The time complexity is directly proportional to the number of nodes in the list&lt;/p>
&lt;p>Space complexity: O(1) The iterative approach uses a constant amount of extra space regardless of the size of the input linked list. We only use a few extra pointers (prev, root) to perform the reversal in place, hence the space complexity is constant.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. &lt;a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">Remove nth node from the end of list&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public class Solution {
public ListNode removeNthFromEnd(ListNode head, int n) {
ListNode dummy = new ListNode(0);
dummy.next = head;
ListNode fast = dummy;
ListNode slow = dummy;
// Move fast pointer n steps ahead
for (int i = 0; i &amp;lt;= n; i++) {
fast = fast.next;
}
// Move both fast and slow pointers until fast reaches the end
while (fast != null) {
fast = fast.next;
slow = slow.next;
}
// Remove the nth node from the end
slow.next = slow.next.next;
return dummy.next;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the linked list.The algorithm iterates through each node of the linked list once. The time complexity is directly proportional to the number of nodes in the list&lt;/p>
&lt;p>Space complexity: O(1) The iterative approach uses a constant amount of extra space regardless of the size of the input linked list.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. &lt;a href="https://leetcode.com/problems/linked-list-cycle/">Linked List Cycle&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public class Solution {
public boolean hasCycle(ListNode head) {
ListNode fast = head;
ListNode slow = head;
while (fast != null &amp;amp;&amp;amp; fast.next != null) {
fast = fast.next.next;
slow = slow.next;
if (fast == slow) return true;
}
return false;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the linked list.The algorithm iterates through each node of the linked list once. The time complexity is directly proportional to the number of nodes in the list&lt;/p>
&lt;p>Space complexity: O(1) The iterative approach uses a constant amount of extra space regardless of the size of the input linked list.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>6. &lt;a href="https://leetcode.com/problems/find-the-duplicate-number/">Find the Duplicate Number&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java"> public int findDuplicate(int[] nums) {
// Initialize slow and fast pointers
int slow = nums[0];
int fast = nums[0];
// Move slow pointer one step and fast pointer two steps
do {
slow = nums[slow];
fast = nums[nums[fast]];
} while (slow != fast);
// Move slow pointer to the start
slow = nums[0];
// Move both pointers at the same speed until they meet
while (slow != fast) {
slow = nums[slow];
fast = nums[fast];
}
// Return the duplicate number
return slow;
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: The first phase, where we detect the cycle, takes O(n) time, where n is the length of the array.The second phase, where we find the entrance to the cycle, also takes O(n) time in the worst case.&lt;/p>
&lt;p>Space complexity: O(1) We are only using a few extra integer variables to store indices (slow and fast pointers), so the space complexity is O(1), constant space.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>7. &lt;a href="https://leetcode.com/problems/merge-k-sorted-lists/">Merge k Sorted Lists&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java"> // Solution using Min Heap
// Time Complexity: O(n*log(k))
// Extra Space Complexity: O(k)
class Solution1 {
public ListNode mergeKLists(ListNode[] lists) {
if (lists == null || lists.length == 0) {
return null;
}
PriorityQueue&amp;lt;ListNode&amp;gt; queue = new PriorityQueue&amp;lt;&amp;gt;((a, b) -&amp;gt; a.val - b.val);
for (ListNode node : lists) {
if (node != null) {
queue.offer(node);
}
}
ListNode dummy = new ListNode(0);
ListNode current = dummy;
while (!queue.isEmpty()) {
ListNode node = queue.poll();
current.next = node;
current = current.next;
if (node.next != null) {
queue.offer(node.next);
}
}
return dummy.next;
}
}
class Solution2 {
public ListNode mergeKLists(ListNode[] lists) {
int size = lists.length;
int interval = 1;
while (interval &amp;lt; size) {
for (int i = 0; i &amp;lt; size - interval; i += 2 * interval) {
lists[i] = mergeTwoLists(lists[i], lists[i + interval]);
}
interval *= 2;
}
return size &amp;gt; 0 ? lists[0] : null;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: The first phase, where we detect the cycle, takes O(n) time, where n is the length of the array.The second phase, where we find the entrance to the cycle, also takes O(n) time in the worst case.&lt;/p>
&lt;p>Space complexity: O(1) We are only using a few extra integer variables to store indices (slow and fast pointers), so the space complexity is O(1), constant space.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. &lt;a href="https://leetcode.com/problems/copy-list-with-random-pointer">Copy List with Random Pointer&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public Node copyRandomList(Node head) {
Node cur = head;
HashMap&amp;lt;Node, Node&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
while (cur != null) {
map.put(cur, new Node(cur.val));
cur = cur.next;
}
cur = head;
while (cur != null) {
map.get(cur).next = map.get(cur.next);
map.get(cur).random = map.get(cur.random);
cur = cur.next;
}
return map.get(head);
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: In the first pass, we iterate through the original list once to create a copy of each node. This operation takes O(n), where n is the number of nodes in the original list. In the second pass, we again iterate through the original list once to link the copied nodes and assign random pointers. This operation also takes O(n).&lt;/p>
&lt;p>Space complexity: O(n) due to the HashMap and the additional nodes created for the copied list.&lt;/p>
&lt;hr></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2024/04/22/linked_list/</guid><pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate></item><item><title>Recursion &amp; Backtracking</title><link>https://karthikselvam.com/posts/2024/04/22/recursion_backtracking/</link><description>&lt;p>In this article, we will solve recursion and backtracking related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>**1. Given an array of integers, print all combinations of size X.&lt;/p>
&lt;pre>&lt;code class="language-java">public static void printCombos(int[] a, int x) {
if (a == null || a.length == 0 || x &amp;gt; a.length)
return;
int[] buffer = new int[x];
printCombosHelper(a, buffer, 0, 0);
}
public static void printCombosHelper(int[] a, int[] buffer, int startIndex, int bufferIndex) {
// termination cases - buffer full
if (bufferIndex == buffer.length) {
printArray(buffer);
return;
}
if (startIndex == a.length) {
return;
}
// find candidates that go into current buffer index
for (int i = startIndex; i &amp;lt; a.length; i++) {
// place item into buffer
buffer[bufferIndex] = a[i];
// recurse to next buffer index
printCombosHelper(a, buffer, i + 1, bufferIndex + 1);
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n^x), where n is the length of array &amp;lsquo;a&amp;rsquo; and &amp;lsquo;x&amp;rsquo; is the size of combinations.&lt;/p>
&lt;p>Space complexity: O(x), for the buffer array.&lt;/p>
&lt;hr>
&lt;p>**2. Given an array of integers A, print all its subsets.&lt;/p>
&lt;pre>&lt;code class="language-java">public static void printSubsets(int[] a, int x) {
if (a == null || a.length == 0 || x &amp;gt; a.length)
return;
int[] buffer = new int[x];
printCombosHelper(a, buffer, 0, 0);
}
public static void printSubsetsHelper(int[] a, int[] buffer, int startIndex, int bufferIndex) {
printArray(buffer);
// termination cases - buffer full
if (bufferIndex == buffer.length) {
return;
}
if (startIndex == a.length) {
return;
}
// find candidates that go into current buffer index
for (int i = startIndex; i &amp;lt; a.length; i++) {
// place item into buffer
buffer[bufferIndex] = a[i];
// recurse to next buffer index
printCombosHelper(a, buffer, i + 1, bufferIndex + 1);
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n^x), where n is the length of array &amp;lsquo;a&amp;rsquo; and &amp;lsquo;x&amp;rsquo; is the size of combinations.&lt;/p>
&lt;p>Space complexity: O(x), for the buffer array.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/subsets/">Subsets&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; subsets(int[] nums) {
List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
List&amp;lt;Integer&amp;gt; templist = new ArrayList&amp;lt;&amp;gt;();
getSubsets(nums,result,templist,0);
return result;
}
public void getSubsets(int[] nums, List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result, List&amp;lt;Integer&amp;gt; tempList , int start){
result.add(new ArrayList(tempList));
if(start &amp;gt;= nums.length){
return;
}
for(int i = start ; i &amp;lt; nums.length ; i++){
tempList.add(nums[i]);
getSubsets(nums,result,tempList,i+1);
tempList.remove(tempList.size()-1);
}
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/subsets-ii/">Subsets II&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; subsetsWithDup(int[] nums) {
Arrays.sort(nums) ;
List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
List&amp;lt;Integer&amp;gt; tempList = new ArrayList&amp;lt;&amp;gt;();
getSubsets(nums,result,tempList,0);
return result;
}
public void getSubsets(int[] nums, List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result, List&amp;lt;Integer&amp;gt; tempList , int start){
result.add(new ArrayList(tempList));
if(start &amp;gt;= nums.length){
return;
}
for(int i =start ; i &amp;lt; nums.length ; i++){
if(i &amp;gt; start &amp;amp;&amp;amp; nums[i-1] == nums[i]){
continue;
}
tempList.add(nums[i]);
getSubsets(nums,result,tempList,i+1);
tempList.remove(tempList.size()-1);
}
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the linked list.The algorithm iterates through each node of the linked list once. The time complexity is directly proportional to the number of nodes in the list&lt;/p>
&lt;p>Space complexity: O(1) The iterative approach uses a constant amount of extra space regardless of the size of the input linked list. We only use a few extra pointers (prev, current, nextTemp) to perform the reversal in place, hence the space complexity is constant.&lt;/p>
&lt;hr>
&lt;p>**4. Given an array A, print all permutations of size X.&lt;/p>
&lt;pre>&lt;code class="language-java">public static void printPerms(int[] a, int x) {
if (a == null || a.length == 0 || x &amp;gt; a.length)
return;
int[] buffer = new int[x];
boolean[] isInBuffer = new boolean[a.length];
printPermsHelper(a, buffer, 0, isInBuffer);
}
public static void printPermsHelper(int[] a, int[] buffer, int bufferIndex, boolean[] isInBuffer) {
// termination cases - buffer full
if (bufferIndex == buffer.length) {
printArray(buffer);
return;
}
// find candidates that go into current buffer index
for (int i = startIndex; i &amp;lt; a.length; i++) {
// place item into buffer
buffer[bufferIndex] = a[i];
isInBuffer[i] = true;
// recurse to next buffer index
printCombosHelper(a, buffer, bufferIndex + 1, isInBuffer);
isInBuffer[i] = false;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n^x), where n is the length of array &amp;lsquo;a&amp;rsquo; and &amp;lsquo;x&amp;rsquo; is the size of combinations.&lt;/p>
&lt;p>Space complexity: O(x), for the buffer array.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>6. &lt;a href="https://leetcode.com/problems/palindrome-partitioning/">Palindrome Partitioning&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; partition(String s) {
List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; partitions = new ArrayList&amp;lt;&amp;gt;();
backtrack(s, 0, new ArrayList&amp;lt;&amp;gt;(), partitions);
return partitions;
}
private void backtrack(String s, int start, List&amp;lt;String&amp;gt; path, List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; partitions) {
if (start == s.length()) {
partitions.add(new ArrayList&amp;lt;&amp;gt;(path));
return;
}
for (int end = start + 1; end &amp;lt;= s.length(); end++) {
if (isPalindrome(s, start, end - 1)) {
path.add(s.substring(start, end));
backtrack(s, end, path, partitions);
path.remove(path.size() - 1);
}
}
}
private boolean isPalindrome(String s, int left, int right) {
while (left &amp;lt; right) {
if (s.charAt(left++) != s.charAt(right--)) {
return false;
}
}
return true;
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>7. &lt;a href="hhttps://leetcode.com/problems/combination-sum/">Combination Sum&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum(int[] candidates, int target) {
List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
backtrack(candidates, target, 0, new ArrayList&amp;lt;&amp;gt;(), result);
return result;
}
private void backtrack(int[] candidates, int target, int start, List&amp;lt;Integer&amp;gt; combination, List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result) {
if (target == 0) {
result.add(new ArrayList&amp;lt;&amp;gt;(combination));
return;
}
for (int i = start; i &amp;lt; candidates.length; i++) {
if (candidates[i] &amp;lt;= target) {
combination.add(candidates[i]);
backtrack(candidates, target - candidates[i], i, combination, result);
combination.remove(combination.size() - 1);
}
}
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>8. &lt;a href="https://leetcode.com/problems/permutations/">Permutations&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; permute(int[] nums) {
List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
backtrack(result, new ArrayList&amp;lt;&amp;gt;(), nums);
return result;
}
private void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result, List&amp;lt;Integer&amp;gt; tempList, int[] nums) {
if (tempList.size() == nums.length) {
result.add(new ArrayList&amp;lt;&amp;gt;(tempList));
} else {
for (int i = 0; i &amp;lt; nums.length; i++) {
if (tempList.contains(nums[i])) continue;
tempList.add(nums[i]);
backtrack(result, tempList, nums);
tempList.remove(tempList.size() - 1);
}
}
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>8. &lt;a href="https://leetcode.com/problems/combination-sum-ii">Combination Sum II&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum2(int[] candidates, int target) {
List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
Arrays.sort(candidates);
backtrack(result, new ArrayList&amp;lt;&amp;gt;(), candidates, target, 0);
return result;
}
private void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result, List&amp;lt;Integer&amp;gt; tempList, int[] candidates, int remain, int start) {
if (remain &amp;lt; 0) return;
else if (remain == 0) result.add(new ArrayList&amp;lt;&amp;gt;(tempList));
else {
for (int i = start; i &amp;lt; candidates.length; i++) {
if (i &amp;gt; start &amp;amp;&amp;amp; candidates[i] == candidates[i - 1]) continue; // skip duplicates
tempList.add(candidates[i]);
backtrack(result, tempList, candidates, remain - candidates[i], i + 1);
tempList.remove(tempList.size() - 1);
}
}
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>9. &lt;a href="https://leetcode.com/problems/word-search/">Word Search&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public boolean exist(char[][] board, String word) {
int rows = board.length ;
int cols = board[0].length;
for(int r = 0 ; r &amp;lt; rows; r++ ){
for(int c = 0 ; c &amp;lt; cols; c++){
if(dfs(board,word,r,c,rows,cols,0)){
return true;
}
}
}
return false;
}
public boolean dfs(char[][] board, String word, int r, int c , int rows, int cols, int index) {
if(index == word.length()){
return true;
}
if(oob(r,c,rows,cols) || board[r][c] != word.charAt(index) || board[r][c] == '#' ){
return false;
}
char ch = board[r][c];
board[r][c] = '#';
boolean result = dfs(board,word,r+1,c,rows,cols,index+1) || dfs(board,word,r-1,c,rows,cols,index+1) ||
dfs(board,word,r,c-1,rows,cols,index+1) || dfs(board,word,r,c+1,rows,cols,index+1) ;
board[r][c] = ch;
return result;
}
public boolean oob(int r, int c , int rows , int cols) {
if(r &amp;gt; rows-1 || r &amp;lt; 0 || c&amp;gt; cols-1 || c &amp;lt; 0) {
return true;
} else{
return false;
}
}
}
&lt;/code>&lt;/pre>
&lt;hr></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2024/04/22/recursion_backtracking/</guid><pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate></item><item><title>Trees</title><link>https://karthikselvam.com/posts/2024/04/21/trees/</link><description>&lt;p>In this article, we will solve trees-related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. &lt;a href="https://leetcode.com/problems/invert-binary-tree/">Invert Binary Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public TreeNode invertTree(TreeNode root) {
if(root == null) {
return null;
}
TreeNode tempNode = root.left;
root.left = root.right;
root.right = tempNode;
invertTree(root.left);
invertTree(root.right);
return root;
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n) The given code performs a depth-first search traversal of the binary tree, and visits each node exactly once. Therefore, the time complexity of the code is O(n), where n is the number of nodes in the binary tree.&lt;/p>
&lt;p>Space complexity: O(n) The space complexity of the code depends on the maximum depth of the binary tree. In the worst case, if the binary tree is skewed (i.e., all the nodes are in a straight line), the maximum depth of the tree would be n (the number of nodes), and the space complexity of the code would be O(n) due to the recursive function calls. However, in the best case, if the binary tree is balanced, the maximum depth of the tree would be log(n), and the space complexity of the code would be O(log(n)).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. &lt;a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">Maximum Depth of Binary Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java"> public int maxDepth(TreeNode root) {
if(root == null){
return 0;
}
int left = maxDepth(root.left);
int right = maxDepth(root.right);
return 1 + Math.max(left,right);
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n) where n is the number of nodes in the binary tree, since the code visits each node exactly once.&lt;/p>
&lt;p>Space complexity: O(h), where h is the height of the binary tree, since the code uses a recursive approach, and the maximum depth of the recursive call stack is equal to the height of the binary tree. In the worst case, where the binary tree is skewed (i.e., all the nodes are in a straight line), the height of the tree would be n (the number of nodes), and the space complexity of the code would be O(n). However, in the best case, where the binary tree is balanced, the height of the tree would be log(n), and the space complexity of the code would be O(log(n)).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/diameter-of-binary-tree/">Diameter of Binary Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public int diameterOfBinaryTree(TreeNode root) {
int leftDepth = depth(root.left);
int rightDepth = depth(root.right);
return Math.max(Math.max(diameterOfBinaryTree(root.left), diameterOfBinaryTree(root.right)), leftDepth + rightDepth);
}
private int depth(TreeNode root){
if(root == null){
return 0;
}
int left = depth(root.left);
int right = depth(root.right);
return 1 + Math.max(left, right);
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n^2^) wwhere n is the number of nodes in the binary tree, since for each node, the code visits all the nodes in its left and right subtrees to compute the diameter.&lt;/p>
&lt;p>Space complexity: O(h), where h is the height of the binary tree, since the code uses a recursive approach, and the maximum depth of the recursive call stack is equal to the height of the binary tree. In the worst case, where the binary tree is skewed (i.e., all the nodes are in a straight line), the height of the tree would be n (the number of nodes), and the space complexity of the code would be O(n). However, in the best case, where the binary tree is balanced, the height of the tree would be log(n), and the space complexity of the code would be O(log(n)).&lt;/p>
&lt;p>Optimized Verison : We can optimize by computing the diameter of the binary tree in a single pass, instead of recursively computing the depth of each node multiple times.&lt;/p>
&lt;pre>&lt;code class="language-java">public int diameterOfBinaryTree(TreeNode root) {
int[] max = {0};
depth(root, max);
return max[0];
}
private int depth(TreeNode root, int[] max) {
if (root == null) {
return 0;
}
int left = depth(root.left, max);
int right = depth(root.right, max);
max[0] = Math.max(max[0], left + right);
return 1 + Math.max(left, right);
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n) where n is the number of nodes in the binary tree.&lt;/p>
&lt;p>Space complexity: O(h), where h is the height of the binary tree.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. &lt;a href="https://leetcode.com/problems/balanced-binary-tree/">Balanced Binary Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public boolean isBalanced(TreeNode root) {
if(root == null){
return true;
}
int leftHeight = height(root.left);
int rightHeight = height(root.right);
if(Math.abs(leftHeight - rightHeight) &amp;gt; 1){
return false;
}
return isBalanced(root.left) &amp;amp;&amp;amp; isBalanced(root.right);
}
private int height(TreeNode root){
if(root == null){
return 0;
}
int left = height(root.left);
int right = height(root.right);
return 1 + Math.max(left,right);
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n log n) in the worst case, where n is the number of nodes in the binary tree. This is because the height of each node is computed recursively using the height method, which has a time complexity of O(n) in the worst case. Since the height method is called for each node in the binary tree, the overall time complexity of isBalanced is O(n log n), because the binary tree has a maximum of log n levels.&lt;/p>
&lt;p>Space complexity: O(n) in the worst case, where n is the number of nodes in the binary tree. This is because the height method is called recursively for each node in the binary tree, and the maximum depth of the recursive call stack is equal to the height of the binary tree, which is O(n) in the worst case. Additionally, the method uses a constant amount of extra space to store the heights of the left and right subtrees of each node. Therefore, the overall space complexity of isBalanced is O(n).&lt;/p>
&lt;p>Optimized version :&lt;/p>
&lt;pre>&lt;code class="language-java">public boolean isBalanced(TreeNode root) {
return checkBalance(root) != -1;
}
private int checkBalance(TreeNode root) {
if (root == null) {
return 0;
}
int left = checkBalance(root.left);
if (left == -1) {
return -1;
}
int right = checkBalance(root.right);
if (right == -1) {
return -1;
}
if (Math.abs(left - right) &amp;gt; 1) {
return -1;
}
return 1 + Math.max(left, right);
}
&lt;/code>&lt;/pre>
&lt;p>The time complexity of the optimized isBalanced method is O(n), where n is the number of nodes in the binary tree, because each node is visited only once and its height is computed in constant time. The space complexity is O(n) as well, because the maximum depth of the recursive call stack is equal to the height of the binary tree, which is O(n) in the worst case.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. &lt;a href="https://leetcode.com/problems/same-tree/">Same Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public boolean isSameTree(TreeNode p, TreeNode q) {
if (p == null &amp;amp;&amp;amp; q == null) {
return true;
}
if (p == null || q == null || p.val != q.val) {
return false;
}
return isSameTree(p.left, q.left) &amp;amp;&amp;amp; isSameTree(p.right, q.right);
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the total number of nodes in the tree. This is because the function performs a recursive traversal of the entire tree, visiting each node once.&lt;/p>
&lt;p>Space complexity: O(n), where n is the height of the tree. This is because the function uses a call stack to keep track of the recursive calls, and the maximum size of the call stack is proportional to the height of the tree. In the worst case, when the tree is completely unbalanced and resembles a linked list, the space complexity of the function becomes O(n). However, in a balanced tree, the space complexity is closer to O(log n), where log n is the height of the tree.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>6. &lt;a href="https://leetcode.com/problems/subtree-of-another-tree/">Subtree of Another Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public boolean isSubtree(TreeNode s, TreeNode t) {
if (s == null) {
return false;
}
if (isSameTree(s, t)) {
return true;
}
return isSubtree(s.left, t) || isSubtree(s.right, t);
}
public boolean isSameTree(TreeNode p, TreeNode q) {
if (p == null &amp;amp;&amp;amp; q == null) {
return true;
}
if (p == null || q == null || p.val != q.val) {
return false;
}
return isSameTree(p.left, q.left) &amp;amp;&amp;amp; isSameTree(p.right, q.right);
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(m * n), where m and n are the number of nodes in the trees s and t, respectively. This is because in the worst case, the function performs an isSameTree check for each node in s with t, which takes O(n) time. However, in the average case, the time complexity is closer to O(m), as the function will terminate early once it finds a matching subtree.&lt;/p>
&lt;p>Space complexity: O(max(m, n)), as the function uses a call stack to keep track of the recursive calls, and the maximum size of the call stack is proportional to the height of the trees. In the worst case, when the trees are completely unbalanced and resemble linked lists, the space complexity becomes O(m) or O(n), whichever is greater.&lt;/p>
&lt;p>Optimized version :&lt;/p>
&lt;pre>&lt;code class="language-java">public boolean isSubtree(TreeNode s, TreeNode t) {
String sPreOrder = getPreOrder(s);
String tPreOrder = getPreOrder(t);
return sPreOrder.indexOf(tPreOrder) != -1;
}
private String getPreOrder(TreeNode node) {
if (node == null) {
return &amp;quot;null&amp;quot;;
}
String left = getPreOrder(node.left);
String right = getPreOrder(node.right);
return &amp;quot;#&amp;quot; + node.val + &amp;quot; &amp;quot; + left + &amp;quot; &amp;quot; + right;
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>sPreOrder: &amp;quot;#3 #4 #1 null null #2 null null #5 null null&amp;quot;
tPreOrder: &amp;quot;#4 #1 null null #2 null null&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>The substring &amp;ldquo;#4 #1 null null #2 null null&amp;rdquo; is found in the string &amp;ldquo;#3 #4 #1 null null #2 null null #5 null null&amp;rdquo;, so we know that t is a subtree of s. Therefore, the function returns true.&lt;/p>
&lt;p>Note that if t were not a subtree of s, then the function would have returned false. The pre-order traversal string of t would not be a substring of the pre-order traversal string of s, so the indexOf method would return -1.&lt;/p>
&lt;p>Time complexity: O(m + n), where m and n are the number of nodes in the trees s and t, respectively. This is because the function only needs to traverse each tree once to get the pre-order traversal string, and the string matching operation takes O(m + n) time in the worst case&lt;/p>
&lt;p>Space complexity: O(m + n), as it needs to store the pre-order traversal strings of both trees.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>7. &lt;a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">Lowest Common Ancestor of a Binary Search Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
if (root == null || p == null || q == null) {
return null;
}
if (p.val &amp;lt; root.val &amp;amp;&amp;amp; q.val &amp;lt; root.val) {
return lowestCommonAncestor(root.left, p, q);
}
if (p.val &amp;gt; root.val &amp;amp;&amp;amp; q.val &amp;gt; root.val) {
return lowestCommonAncestor(root.right, p, q);
}
return root;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(log N) in the best case and O(N) in the worst case, where N is the number of nodes in the BST. In the best case, when the BST is balanced, the time complexity of the algorithm is O(log N) since we eliminate half of the tree at each level. In the worst case, when the BST is skewed, the time complexity is O(N) since we may have to traverse the entire tree.&lt;/p>
&lt;p>Space complexity: O(log N) in the best case and O(N) in the worst case. In the best case, when the BST is balanced, the space complexity of the algorithm is O(log N) since we only use a constant amount of space for each level of the recursive call stack. In the worst case, when the BST is skewed, the space complexity is O(N) since we may have to store all N nodes on the call stack.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>8. &lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; levelOrder(TreeNode root) {
List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
if (root == null) {
return result;
}
Queue&amp;lt;TreeNode&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
queue.offer(root);
while (!queue.isEmpty()) {
int levelSize = queue.size();
List&amp;lt;Integer&amp;gt; levelNodes = new ArrayList&amp;lt;&amp;gt;();
for (int i = 0; i &amp;lt; levelSize; i++) {
TreeNode node = queue.poll();
levelNodes.add(node.val);
if (node.left != null) {
queue.offer(node.left);
}
if (node.right != null) {
queue.offer(node.right);
}
}
result.add(levelNodes);
}
return result;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(N), where N is the number of nodes in the binary tree, since we need to visit each node once.&lt;/p>
&lt;p>Space complexity: O(N) since we may need to store all N nodes in the queue at once in the worst case.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>9. &lt;a href="https://leetcode.com/problems/binary-tree-right-side-view/">Binary Tree Right Side View&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;Integer&amp;gt; rightSideView(TreeNode root) {
List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
if (root == null) {
return result;
}
Queue&amp;lt;TreeNode&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
queue.offer(root);
while (!queue.isEmpty()) {
int levelSize = queue.size();
for (int i = 0; i &amp;lt; levelSize; i++) {
TreeNode node = queue.poll();
if (i == levelSize - 1) {
result.add(node.val);
}
if (node.left != null) {
queue.offer(node.left);
}
if (node.right != null) {
queue.offer(node.right);
}
}
}
return result;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(N), where N is the number of nodes in the binary tree, since we need to visit each node once.&lt;/p>
&lt;p>Space complexity: O(N) since we may need to store all N nodes in the queue at once in the worst case.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>10. &lt;a href="https://leetcode.com/problems/count-good-nodes-in-binary-tree/">Count Good Nodes in Binary Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int goodNodes(TreeNode root) {
return countGoodNodes(root, Integer.MIN_VALUE);
}
private int countGoodNodes(TreeNode node, int maxSoFar) {
if (node == null) return 0;
int count = 0;
if (node.val &amp;gt;= maxSoFar) {
count++;
maxSoFar = node.val;
}
count += countGoodNodes(node.left, maxSoFar);
count += countGoodNodes(node.right, maxSoFar);
return count;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the binary tree. This is because we traverse each node once in a depth-first manner.&lt;/p>
&lt;p>Space complexity:O(h), where h is the height of the binary tree. This space is used for the recursive call stack. In the worst case, where the binary tree is skewed and has a height equivalent to the number of nodes (h ≈ n), the space complexity would be O(n). However, in a balanced binary tree, the space complexity would be O(log n), where log n is the height of the tree.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>11. &lt;a href="https://leetcode.com/problems/validate-binary-search-tree/">Validate Binary Search Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public boolean isValidBST(TreeNode root) {
// Use long instead of int to handle edge cases where value equals Integer.MIN_VALUE or Integer.MAX_VALUE
return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
}
private boolean isValidBST(TreeNode node, long minVal, long maxVal) {
if (node == null) {
return true;
}
if (node.val &amp;lt;= minVal || node.val &amp;gt;= maxVal) {
return false;
}
return isValidBST(node.left, minVal, node.val) &amp;amp;&amp;amp; isValidBST(node.right, node.val, maxVal);
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the tree. This is because we visit each node exactly once during the in-order traversal.&lt;/p>
&lt;p>Space complexity: O(n), where n is the number of nodes in the tree. This is because we need to store the recursive call stack during the traversal, which can be as large as the height of the tree, and in the worst case the height of the tree can be n.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>12. &lt;a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/">Kth Smallest Element in a BST&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int kthSmallest(TreeNode root, int k) {
List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
inorder(root, list);
return list.get(k - 1);
}
private void inorder(TreeNode root, List&amp;lt;Integer&amp;gt; list) {
if (root == null) return;
inorder(root.left, list);
list.add(root.val);
inorder(root.right, list);
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the tree. This is because we visit each node exactly once during the in-order traversal.&lt;/p>
&lt;p>Space complexity: O(n),as it uses additional space to store the in-order traversal sequence in the list.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>13. &lt;a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">Construct Binary Tree from Preorder and Inorder Traversal&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public TreeNode buildTree(int[] preorder, int[] inorder) {
return buildTreeHelper(preorder, inorder, 0, 0, inorder.length - 1);
}
private TreeNode buildTreeHelper(int[] preorder, int[] inorder, int preStart, int inStart, int inEnd) {
if (preStart &amp;gt; preorder.length - 1 || inStart &amp;gt; inEnd) {
return null;
}
TreeNode root = new TreeNode(preorder[preStart]);
int inIndex = 0;
for (int i = inStart; i &amp;lt;= inEnd; i++) {
if (inorder[i] == root.val) {
inIndex = i;
}
}
root.left = buildTreeHelper(preorder, inorder, preStart + 1, inStart, inIndex - 1);
root.right = buildTreeHelper(preorder, inorder, preStart + inIndex - inStart + 1, inIndex + 1, inEnd);
return root;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the tree.&lt;/p>
&lt;p>Space complexity: O(n),due to the recursion stack, where n is the height of the binary tree.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>14. &lt;a href="https://leetcode.com/problems/binary-tree-maximum-path-sum">Binary Tree Maximum Path Sum&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
int maxSum = Integer.MIN_VALUE;
public int maxPathSum(TreeNode root) {
calculateMaxSum(root);
return maxSum;
}
private int calculateMaxSum(TreeNode node) {
if (node == null) return 0;
// Calculate maximum sum in left and right subtrees
int leftSum = Math.max(0, calculateMaxSum(node.left));
int rightSum = Math.max(0, calculateMaxSum(node.right));
// Update maxSum by considering the current node's path
maxSum = Math.max(maxSum, node.val + leftSum + rightSum);
// Return the maximum sum of the path through the current node
return node.val + Math.max(leftSum, rightSum);
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of nodes in the tree.&lt;/p>
&lt;p>Space complexity: O(h), where h is the height of the binary tree, due to the recursion stack.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>15. &lt;a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree">Serialize and Deserialize Binary Tree&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public class Codec {
// Encodes a tree to a single string.
public String serialize(TreeNode root) {
StringBuilder sb = new StringBuilder();
serializeHelper(root, sb);
return sb.toString();
}
private void serializeHelper(TreeNode node, StringBuilder sb) {
if (node == null) {
sb.append(&amp;quot;null&amp;quot;).append(&amp;quot;,&amp;quot;);
return;
}
sb.append(node.val).append(&amp;quot;,&amp;quot;);
serializeHelper(node.left, sb);
serializeHelper(node.right, sb);
}
// Decodes your encoded data to tree.
public TreeNode deserialize(String data) {
String[] nodes = data.split(&amp;quot;,&amp;quot;);
Queue&amp;lt;String&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;(Arrays.asList(nodes));
return deserializeHelper(queue);
}
private TreeNode deserializeHelper(Queue&amp;lt;String&amp;gt; queue) {
String val = queue.poll();
if (val.equals(&amp;quot;null&amp;quot;)) return null;
TreeNode node = new TreeNode(Integer.parseInt(val));
node.left = deserializeHelper(queue);
node.right = deserializeHelper(queue);
return node;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: We split the serialized string into an array of strings, which takes O(n) time. Then, we construct the binary tree recursively by visiting each node once. Therefore, the time complexity of deserialization is linear with respect to the number of nodes in the tree.&lt;/p>
&lt;p>Space complexity: The space complexity is O(n) because we use a queue to store the nodes during deserialization, and the size of the queue can be at most O(n) when all nodes are stored in it. Additionally, the recursion stack space used during deserialization is proportional to the height of the tree, which can be at most O(n) for a skewed binary tree.&lt;/p>
&lt;hr></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2024/04/21/trees/</guid><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate></item><item><title>System Design Concepts</title><link>https://karthikselvam.com/posts/2023/08/05/system_design_meta/</link><description>&lt;p>&lt;strong>1. How to transfer data at large scale ?&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Non blocking I/O&lt;/li>
&lt;li>Buffering and Batching&lt;/li>
&lt;li>Network Protocols&lt;/li>
&lt;li>Message Formats&lt;/li>
&lt;li>Load Balancing&lt;/li>
&lt;li>Partitioning&lt;/li>
&lt;li>Consistent Hashing&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>2. How to aggregate data efficiently ?&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Push vs Pull&lt;/li>
&lt;li>Deduplication&lt;/li>
&lt;li>Checkpointing&lt;/li>
&lt;li>Data enrichment&lt;/li>
&lt;li>Embeded database&lt;/li>
&lt;li>State management&lt;/li>
&lt;li>Fallback&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>3. How to store data reliably ?&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Reverse Proxy&lt;/li>
&lt;li>Coordination service&lt;/li>
&lt;li>Health checking&lt;/li>
&lt;li>Peer and service discovery&lt;/li>
&lt;li>Replication&lt;/li>
&lt;li>Quorum&lt;/li>
&lt;li>Availability zone&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>4. How to retrieve data quickly ?&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Aggregate on write&lt;/li>
&lt;li>Eventual consistency&lt;/li>
&lt;li>Denormalization&lt;/li>
&lt;li>Data rollup&lt;/li>
&lt;li>Hot and cold storage&lt;/li>
&lt;li>Polyglot persistence&lt;/li>
&lt;li>Distributed cache&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>4. How to define system requirements ?&lt;/strong>
Functional requirement - Define the qualities of the system. What a system is supposed to do ? Example The system must allow application to exchange messages.
Non Function requirement - Define the qualites of a system how a system is supposed to be. Example scalable, highly available and fast.&lt;/p>
&lt;p>How to go about defining functional requirement ?
Start with the customer and work backward.
We need to identify who is going to use the system and how ?
For well know systems like youtube, twitter, facebook etc its easy. But for systems such has rate limiting, content delivery network, it can be quite challenging. In such systems its better to start with customer/clients/users and work backwards on how they use the system. For example, In youtube the customers are content creators and viewers and how they are going to use the system ? content creators will upload videos, create posts where as viewers search for videos, watch videos, and comment. Similarly in the case of content delivery network the customer are webservices and the system will trottle there request.&lt;/p>
&lt;p>Non functional requirements - High availability
Availability - Defines the system uptime, the percentage of time the system has been working and available. Example, 99% availbility, The system was unavialable about 3.65 days a years.&lt;/p>
&lt;p>Success ration of request - 1 request out of 100 fails.&lt;/p>
&lt;p>What is a highly aviable system ?
Its not about a number. Its is about architecture and process.&lt;/p>
&lt;p>Design principles behind high avilability&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Build redundancy to eleminate single points of failure. Example : regions, availability zones, fallback, data replication, high availability pair.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Switch from one server to another without losing data. Example: DNS,load balancing, reverse proxy,API gateway, peer discovery, service discovery.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Protect the system from atypical client behavior. Example : load shedding, rate limiting, shuffle sharding, cell- based architecture.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Protect the system from failures and perfomance degradation of its dependencies Example: timeouts, circuit breaker, bulkhead, retries, idempotency.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Detect failure as they occure. Example : monitoring&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Process behind high availability:&lt;/p>
&lt;ol>
&lt;li>Change management - All code and configration changes are reviewed and approved.&lt;/li>
&lt;li>QA - regaularly execercise tests to validate that newly introduced changes meet functional and non-functional requirements.&lt;/li>
&lt;li>Deployment - Deploy changes to a production environment frequently, quickly, safely, automated rollback.&lt;/li>
&lt;li>Capacity planning : Monitor system utilization and add resources to meet growing demand.&lt;/li>
&lt;li>Disaster recovery : Recover system quickly in the event of a diaster, regularly test failover to diaster recovery.&lt;/li>
&lt;li>Root cause analysis : Establish the root cause of the failure and identify preventive measures&lt;/li>
&lt;li>Operational readiness review : Evaluate system&amp;rsquo;s operational state and identify gaps in operations. Define actions to remediate risks.&lt;/li>
&lt;li>Game day : simulate a failure or event and test system and team responses.&lt;/li>
&lt;li>Team culture : Good team culture promotes process discipline.&lt;/li>
&lt;/ol>
&lt;p>Nonfunctional requirements - Fault tolerance&lt;/p>
&lt;ol>
&lt;li>Fault tolerance - is the property that enables a system to continue operating properly in the even of one or more faults within some of its components.&lt;/li>
&lt;li>Fault tolerance vs High availability - fault tolerant system has the goal of zero downtime. Where as high availability system the down time is possible and the system trie to minimize it. Fault tolerance can be achieved by using same design principles and processes as of high availability and requires more redundancy.&lt;/li>
&lt;/ol>
&lt;p>Nonfunctional requirements - Resilience&lt;/p>
&lt;ol>
&lt;li>Reilience - Systems that in the face of faults can provide and maitain an acceptable level of service are called resilient systems.&lt;/li>
&lt;li>To ensure resiliency we need faults to happen in the system periodically to test resilience also called chaos engineering. Example - Killing instances of a server.&lt;/li>
&lt;/ol></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/08/05/system_design_meta/</guid><pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate></item><item><title>Creational Design Patterns</title><link>https://karthikselvam.com/posts/2023/03/23/creational_patterns/</link><description>&lt;p>Creational design patterns solve common problems that arise during the creation of objects. Following are some of the commonly used creational design patterns.&lt;/p>
&lt;p>&lt;strong>1. Builder pattern&lt;/strong> : The Builder pattern is a creational design pattern that separates the construction of complex objects from their representation, allowing the same construction process to create different representations. This pattern is especially useful when creating objects that require many steps to initialize, and whose initialization steps are optional or may vary.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Car {
private String make;
private String model;
private int year;
private String color;
private String engine;
// Private constructor to enforce object creation through builder
private Car(Builder builder) {
this.make = builder.make;
this.model = builder.model;
this.year = builder.year;
this.color = builder.color;
this.engine = builder.engine;
}
public static class Builder {
private String make;
private String model;
private int year;
private String color;
private String engine;
public Builder make(String make) {
this.make = make;
return this;
}
public Builder model(String model) {
this.model = model;
return this;
}
public Builder year(int year) {
this.year = year;
return this;
}
public Builder color(String color) {
this.color = color;
return this;
}
public Builder engine(String engine) {
this.engine = engine;
return this;
}
public Car build() {
return new Car(this);
}
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, the Car class has a private constructor to enforce object creation through the Builder. The Builder class has methods to set the different fields of the Car class, and a build() method to create the Car object.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of how to use the Builder to create a Car object:&lt;/p>
&lt;pre>&lt;code class="language-java">Car car = new Car.Builder()
.make(&amp;quot;Toyota&amp;quot;)
.model(&amp;quot;Camry&amp;quot;)
.year(2022)
.color(&amp;quot;Silver&amp;quot;)
.engine(&amp;quot;V6&amp;quot;)
.build();
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>2. Factory pattern&lt;/strong> : The Factory pattern is a creational design pattern that provides a way to create objects without specifying the exact class of object that will be created. Instead, a factory class is used to create objects based on certain conditions or parameters.&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Car {
public void drive();
}
public class Sedan implements Car {
@Override
public void drive() {
System.out.println(&amp;quot;Driving a Sedan&amp;quot;);
}
}
public class SUV implements Car {
@Override
public void drive() {
System.out.println(&amp;quot;Driving an SUV&amp;quot;);
}
}
public class CarFactory {
public static Car createCar(String carType) {
if(carType.equalsIgnoreCase(&amp;quot;Sedan&amp;quot;)) {
return new Sedan();
} else if(carType.equalsIgnoreCase(&amp;quot;SUV&amp;quot;)) {
return new SUV();
} else {
throw new IllegalArgumentException(&amp;quot;Invalid car type: &amp;quot; + carType);
}
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have an interface called Car with a method called drive(), and two classes that implement the Car interface: Sedan and SUV. We also have a CarFactory class with a createCar() method that takes a carType parameter and creates a Car object based on the specified car type.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of how to use the CarFactory to create a Car object:&lt;/p>
&lt;pre>&lt;code class="language-java">Car sedan = CarFactory.createCar(&amp;quot;Sedan&amp;quot;);
sedan.drive(); // Output: &amp;quot;Driving a Sedan&amp;quot;
Car suv = CarFactory.createCar(&amp;quot;SUV&amp;quot;);
suv.drive(); // Output: &amp;quot;Driving an SUV&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>In this example, we create a Sedan and SUV object using the CarFactory.createCar() method, and then call the drive() method on each object to drive the car. The CarFactory class takes care of creating the correct type of Car object based on the input carType.&lt;/p>
&lt;p>Advantages of using static method in factory method:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It makes the method easily accessible: Since the method is static, it can be accessed directly from the class name, without the need to create an instance of the class.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It simplifies the code: Since the method is static, it doesn&amp;rsquo;t require an instance of the class to be created, which can simplify the code.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is thread-safe: Static methods are thread-safe by default, which means that multiple threads can call the method simultaneously without causing any issues.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>3. Abstract Factory pattern&lt;/strong> : The Abstract Factory Pattern is a creational design pattern that provides an interface for creating families of related or dependent objects without specifying their concrete classes. It is useful when you need to create a set of related objects that work together and have the same interface, but the concrete implementation of those objects may vary depending on some condition.&lt;/p>
&lt;p>Here&amp;rsquo;s an example implementation of the Abstract Factory Pattern in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Car {
public void drive();
}
public interface CarFactory {
public Car createCar();
}
public class Sedan implements Car {
@Override
public void drive() {
System.out.println(&amp;quot;Driving a Sedan&amp;quot;);
}
}
public class SUV implements Car {
@Override
public void drive() {
System.out.println(&amp;quot;Driving an SUV&amp;quot;);
}
}
public class SedanFactory implements CarFactory {
@Override
public Car createCar() {
return new Sedan();
}
}
public class SUVFactory implements CarFactory {
@Override
public Car createCar() {
return new SUV();
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have an interface called Car with a method called drive(), and an interface called CarFactory with a method called createCar(). We also have two classes that implement the Car interface: Sedan and SUV. Additionally, we have two classes that implement the CarFactory interface: SedanFactory and SUVFactory.&lt;/p>
&lt;p>The SedanFactory and SUVFactory classes are responsible for creating Sedan and SUV objects, respectively. They implement the createCar() method to return a Car object of the corresponding type.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of how to use the Abstract Factory Pattern to create a set of related objects:&lt;/p>
&lt;pre>&lt;code class="language-java">CarFactory sedanFactory = new SedanFactory();
Car sedan = sedanFactory.createCar();
sedan.drive(); // Output: &amp;quot;Driving a Sedan&amp;quot;
CarFactory suvFactory = new SUVFactory();
Car suv = suvFactory.createCar();
suv.drive(); // Output: &amp;quot;Driving an SUV&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>In this example, we create two instances of CarFactory - SedanFactory and SUVFactory. We then use these factories to create Car objects of the corresponding type - Sedan and SUV. Finally, we call the drive() method on each object to drive the car.&lt;/p>
&lt;p>The Abstract Factory Pattern makes it easy to create a set of related objects that work together and have the same interface, without specifying their concrete classes. This provides a lot of flexibility and makes it easier to modify the object creation process without affecting the rest of the code.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. Difference between factory and abstract factory&lt;/strong>
The main difference between the Factory Pattern and the Abstract Factory Pattern is that the Factory Pattern creates individual objects, whereas the Abstract Factory Pattern creates families of related objects.&lt;/p>
&lt;p>The Factory Pattern is used to create a single object of a specific type. It provides a single interface that can be used to create an object of a specific class, based on some condition. This pattern is useful when you need to create an object of a specific type and want to decouple the object creation process from the rest of the code.&lt;/p>
&lt;p>On the other hand, the Abstract Factory Pattern is used to create a family of related objects. It provides an interface for creating families of related or dependent objects, without specifying their concrete classes. This pattern is useful when you need to create a set of related objects that work together and have the same interface, but the concrete implementation of those objects may vary depending on some condition.&lt;/p>
&lt;p>In general, you would use the Factory Pattern when you need to create a single object of a specific type, and the Abstract Factory Pattern when you need to create a family of related objects that work together.&lt;/p>
&lt;p>For example, let&amp;rsquo;s say you are building a car dealership application. You might use the Factory Pattern to create instances of individual car models, such as a Sedan or an SUV. However, you would use the Abstract Factory Pattern to create families of related objects, such as a family of Sedans that have the same engine type and features.&lt;/p>
&lt;p>In summary, the Factory Pattern and the Abstract Factory Pattern are both useful creational design patterns, but they serve different purposes. The Factory Pattern is used to create individual objects of a specific type, whereas the Abstract Factory Pattern is used to create families of related objects that work together.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. Singleton pattern&lt;/strong> :The Singleton pattern is a creational design pattern that ensures that a class has only one instance and provides a global point of access to it. This pattern is useful when we need to ensure that only one instance of a class is created and shared across the application.&lt;/p>
&lt;p>Here&amp;rsquo;s an example implementation of the Singleton pattern in Java using the car concept:&lt;/p>
&lt;pre>&lt;code class="language-java">public class CarSingleton {
// Private static instance of the singleton class
private static CarSingleton instance;
// Private constructor to prevent direct instantiation of the class
private CarSingleton() {
}
// Public static method to get the singleton instance
public static CarSingleton getInstance() {
if (instance == null) {
instance = new CarSingleton();
}
return instance;
}
public void drive() {
System.out.println(&amp;quot;Driving the car...&amp;quot;);
}
}
// Client class
public class CarClient {
public static void main(String[] args) {
CarSingleton car1 = CarSingleton.getInstance();
CarSingleton car2 = CarSingleton.getInstance();
// Both car1 and car2 will reference the same instance
System.out.println(car1 == car2);
car1.drive();
car2.drive();
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have a CarSingleton class that implements the Singleton pattern. The class has a private static instance of itself and a private constructor to prevent direct instantiation of the class. The public static method getInstance() returns the singleton instance, creating it if it doesn&amp;rsquo;t already exist. Finally, we have a drive() method that simulates driving the car.&lt;/p>
&lt;p>In the client class, we create two CarSingleton objects using the getInstance() method. Since the getInstance() method returns the same instance each time it is called, both car1 and car2 will reference the same instance of the CarSingleton class. Finally, we call the drive() method on both car1 and car2 to demonstrate that they are referencing the same object.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. Singleton pattern&lt;/strong> : The Prototype pattern is a creational design pattern that allows creating new objects by copying existing ones, without exposing their underlying implementation details. This pattern provides a way to create new objects efficiently by cloning existing instances, rather than creating them from scratch.&lt;/p>
&lt;p>Here&amp;rsquo;s an example implementation of the Prototype pattern in Java using the car concept:&lt;/p>
&lt;pre>&lt;code class="language-java">// Prototype interface
public interface CarPrototype extends Cloneable {
public CarPrototype clone();
}
// Concrete Prototype
public class Car implements CarPrototype {
private String make;
private String model;
private int year;
public Car(String make, String model, int year) {
this.make = make;
this.model = model;
this.year = year;
}
public void setMake(String make) {
this.make = make;
}
public void setModel(String model) {
this.model = model;
}
public void setYear(int year) {
this.year = year;
}
@Override
public CarPrototype clone() {
return new Car(make, model, year);
}
@Override
public String toString() {
return &amp;quot;Car{&amp;quot; +
&amp;quot;make='&amp;quot; + make + '\'' +
&amp;quot;, model='&amp;quot; + model + '\'' +
&amp;quot;, year=&amp;quot; + year +
'}';
}
}
// Client class
public class CarClient {
public static void main(String[] args) {
CarPrototype carPrototype = new Car(&amp;quot;Toyota&amp;quot;, &amp;quot;Camry&amp;quot;, 2022);
CarPrototype clonedCar1 = carPrototype.clone();
CarPrototype clonedCar2 = carPrototype.clone();
// Changing properties of cloned car
((Car) clonedCar1).setYear(2023);
((Car) clonedCar2).setMake(&amp;quot;Honda&amp;quot;);
System.out.println(carPrototype.toString());
System.out.println(clonedCar1.toString());
System.out.println(clonedCar2.toString());
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have a CarPrototype interface that defines the clone() method. The Car class implements the CarPrototype interface and provides an implementation of the clone() method. The CarClient class demonstrates how the prototype pattern can be used to create new Car objects efficiently by cloning an existing Car object. In the client class, we create a carPrototype object with some initial values. We then create two clonedCar objects by calling the clone() method on the carPrototype object. Finally, we modify the properties of the clonedCar objects to demonstrate that they are separate instances.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/03/23/creational_patterns/</guid><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate></item><item><title>Awesome Stuff</title><link>https://karthikselvam.com/posts/2023/02/25/awesome_stuff/</link><description>&lt;p>&lt;strong>1. &lt;a href="https://github.com/kilimchoi/engineering-blogs">Engineering Blogs&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>2. &lt;a href="https://www.falkhausen.de/index.html">Java Packages with UML Diagrams&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3. &lt;a href="https://github.com/hadign20/student-career-handbook/blob/master/domain-specific/a-deeper-understanding-of-java.md">Java Resources&lt;/a>&lt;/strong>&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/02/25/awesome_stuff/</guid><pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate></item><item><title>Using Collections the right way</title><link>https://karthikselvam.com/posts/2023/02/23/collections/</link><description>&lt;h3 id="iterating-through-a-list">Iterating through a List &lt;a href="#iterating-through-a-list" class="hash">#&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>Iterating through a List using Index.&lt;/li>
&lt;/ol>
&lt;p>Iterating through a list is a basic operation on a collection, but over the years it’s gone through a few significant changes. We’ll begin with the old and evolve an example—enumerating a list of names—to the elegant style.&lt;/p>
&lt;pre>&lt;code class="language-java">final List&amp;lt;String&amp;gt; friends = Arrays.asList(&amp;quot;Brian&amp;quot;, &amp;quot;Nate&amp;quot;, &amp;quot;Neal&amp;quot;, &amp;quot;Raju&amp;quot;, &amp;quot;Sara&amp;quot;, &amp;quot;Scott&amp;quot;);
&lt;/code>&lt;/pre>
&lt;p>Here’s the habitual, but not so desirable, way to iterate and print each of the elements&lt;/p>
&lt;pre>&lt;code class="language-java">for(int i = 0; i &amp;lt; friends.size(); i++) {
System.out.println(friends.get(i));
}
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>Iterating through a List using Iterator.&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-java">for(String name : friends) {
System.out.println(name);
}
&lt;/code>&lt;/pre>
&lt;p>Under the hood this form of iteration uses the Iterator interface and calls into its hasNext() and next() methods.Both these versions are external iterators, which mix how we do it with what we’d like to achieve. We explicitly control the iteration with them, indicating where to start and where to end; the second version does that under the hood using the Iterator methods. With explicit control, the break and continue statements can also help manage the iteration’s flow of control.&lt;/p>
&lt;ol start="3">
&lt;li>Using forEach&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-java">friends.forEach(new Consumer&amp;lt;String&amp;gt;() {
public void accept(final String name) {
System.out.println(name);
}
});
&lt;/code>&lt;/pre>
&lt;p>we traded in the old for loop for the new internal iterator forEach(). As for the benefit, we went from specifying how to iterate to focusing on what we want to do for each element.&lt;/p>
&lt;ol start="4">
&lt;li>Using lambda expressions&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-java">friends.forEach((final String name) -&amp;gt; System.out.println(name));
&lt;/code>&lt;/pre>
&lt;p>The underlying library takes control of how the lambda expressions are evaluated. It can decide to perform them lazily, in any order, and exploit parallelism as it sees fit.&lt;/p>
&lt;p>The Java compiler also offers some lenience and can infer the types. Leaving out the type is convenient, requires less effort, and is less noisy. Here’s the previous code without the type information.&lt;/p>
&lt;pre>&lt;code class="language-java">friends.forEach((name) -&amp;gt; System.out.println(name));
&lt;/code>&lt;/pre>
&lt;h3 id="transforming-a-list">Transforming a List &lt;a href="#transforming-a-list" class="hash">#&lt;/a>&lt;/h3>
&lt;p>Java’s String is immutable, so instances can’t be changed. We could create new strings in all caps and replace the appropriate elements in the collection. However, the original collection would be lost; also, if the original list is immutable, like it is when created with Arrays.asList(), then the list can’t change. Another downside is it would be hard to parallelize the computations.Creating a new list that has the elements in all caps is a better option.&lt;/p>
&lt;pre>&lt;code class="language-java">final List&amp;lt;String&amp;gt; uppercaseNames = new ArrayList&amp;lt;String&amp;gt;();
for(String name : friends) {
uppercaseNames.add(name.toUpperCase());
}
&lt;/code>&lt;/pre>
&lt;p>As a first step to move toward a functional style, we could use the internal iterator forEach() method.&lt;/p>
&lt;pre>&lt;code class="language-java">final List&amp;lt;String&amp;gt; uppercaseNames = new ArrayList&amp;lt;String&amp;gt;();
friends.forEach(name -&amp;gt; uppercaseNames.add(name.toUpperCase()));
System.out.println(uppercaseNames);
&lt;/code>&lt;/pre>
&lt;p>We used the internal iterator, but that still required the empty list and the effort to add elements to it.&lt;/p>
&lt;p>Using Lambda Expressions : The map() method of a new Stream interface can help us avoid mutability and make the code concise&lt;/p>
&lt;pre>&lt;code class="language-java">friends.stream()
.map(name -&amp;gt; name.toUpperCase())
.forEach(name -&amp;gt; System.out.print(name + &amp;quot; &amp;quot;));
&lt;/code>&lt;/pre>
&lt;p>The map() method is quite useful to map or transform an input collection into a new output collection. This method will ensure that the same number of elements exists in the input and the output sequence. However, element types in the input don’t have to match the element types in the output collection.&lt;/p>
&lt;h3 id="finding-elements">Finding Elements &lt;a href="#finding-elements" class="hash">#&lt;/a>&lt;/h3>
&lt;p>The now-familiar elegant methods to traverse and transform collections will not directly help pick elements from a collection. The filter() method is designed for that purpose.&lt;/p>
&lt;p>From a list of names, let’s pick the ones that start with the letter N. Since there may be zero matching names in the list, the result may be an empty list. Let’s first code it using the old approach.&lt;/p>
&lt;pre>&lt;code class="language-java">final List&amp;lt;String&amp;gt; startsWithN = new ArrayList&amp;lt;String&amp;gt;();
for(String name : friends) {
if(name.startsWith(&amp;quot;N&amp;quot;)) {
startsWithN.add(name);
}
}
&lt;/code>&lt;/pre>
&lt;p>Let’s refactor this code to use the filter() method.&lt;/p>
&lt;pre>&lt;code class="language-java">final List&amp;lt;String&amp;gt; startsWithN = friends.stream()
.filter(name -&amp;gt; name.startsWith(&amp;quot;N&amp;quot;))
.collect(Collectors.toList());
&lt;/code>&lt;/pre>
&lt;p>The filter() method expects a lambda expression that returns a boolean result. If the lambda expression returns a true, the element in context while executing that lambda expression is added to a result collection; it’s skipped otherwise. Finally the method returns a Stream with only elements for which the lambda expression yielded a true.&lt;/p>
&lt;p>The filter() method returns an iterator just like the map() method does, but the similarity ends there. Whereas the map() method returns a collection of the same size as the input collection, the filter() method may not. It may yield a result collection with a number of elements ranging from zero to the maximum number of elements in the input collection. However, unlike map(), the elements in the result collection that filter() returned are a subset of the elements in the input collection.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/02/23/collections/</guid><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate></item><item><title>Note on Large Scale Deployment</title><link>https://karthikselvam.com/posts/2023/01/27/deployment/</link><description>&lt;h3 id="challenges-in-large-scale-deployment">Challenges in Large scale deployment &lt;a href="#challenges-in-large-scale-deployment" class="hash">#&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>Application Deployment - problems at the application level&lt;/li>
&lt;li>Infrastructure Deployment - problems faced by hosting the application on the infrastructure&lt;/li>
&lt;li>Operations - problem that arise during the maintainence of deployment&lt;/li>
&lt;/ol>
&lt;h3 id="application-deployment">Application Deployment &lt;a href="#application-deployment" class="hash">#&lt;/a>&lt;/h3>
&lt;p>Typical components of large scale systems:&lt;/p>
&lt;ul>
&lt;li>Web Apps and replicas&lt;/li>
&lt;li>Microservices and replicas&lt;/li>
&lt;li>Databases
&lt;ul>
&lt;li>RDBMS and NoSQL&lt;/li>
&lt;li>Replication and Sharding&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Message Queues
&lt;ul>
&lt;li>Replication and partitioning&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Caches&lt;/li>
&lt;li>Content Storage&lt;/li>
&lt;li>Log file storage&lt;/li>
&lt;li>Search &amp;amp; Analytics&lt;/li>
&lt;li>Directory / LDAP servers&lt;/li>
&lt;/ul>
&lt;h3 id="infrastructure-deployment">Infrastructure Deployment &lt;a href="#infrastructure-deployment" class="hash">#&lt;/a>&lt;/h3>
&lt;p>Things we need to take into considersation for deploying the application at infrastructure level&lt;/p>
&lt;ul>
&lt;li>Compute Infrastructure : CPU, RAM, Disks&lt;/li>
&lt;li>Network
&lt;ul>
&lt;li>Secure Access : Firewalls, Certificates&lt;/li>
&lt;li>Routing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Load Balancers
&lt;ul>
&lt;li>Hard loadbalancers&lt;/li>
&lt;li>Software loadbalancers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DNS and Discovery Services&lt;/li>
&lt;li>Storage for Application : Content, VM/Container Images, Backups, Logs&lt;/li>
&lt;li>Mail Servers&lt;/li>
&lt;li>CDN&lt;/li>
&lt;/ul>
&lt;p>We must consider infrastructure support for Dev, Test, Stagging, and Prod enviroment as well.&lt;/p>
&lt;h3 id="operations">Operations &lt;a href="#operations" class="hash">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Development Team :Develop - Build - Test - Package - Image&lt;/li>
&lt;li>Operations Team : Deployment - Logging - Monitoring - Scale - Failover - Hotbackups / Coldbackups&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Deployment Solutions&lt;/p>
&lt;ul>
&lt;li>Application Deploypment : Containers(Docker)&lt;/li>
&lt;li>Infrastructure Deployment: Cloud(Aws/Azure/Gcp)&lt;/li>
&lt;li>Operations : Kubernetes&lt;/li>
&lt;li>Automations : Devops Tools(Vagrant/Ansible/Chef)&lt;/li>
&lt;/ul></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/27/deployment/</guid><pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate></item><item><title>System Performance</title><link>https://karthikselvam.com/posts/2023/01/27/performance/</link><description>&lt;h3 id="performance">Performance &lt;a href="#performance" class="hash">#&lt;/a>&lt;/h3>
&lt;p>Measure of how fast or responsive a system is under&lt;/p>
&lt;ul>
&lt;li>A given workload&lt;/li>
&lt;li>A given hardware setup&lt;/li>
&lt;/ul>
&lt;p>Performance Goals - As we increase workload the performance be stable or should not severely degrade the performance. If we increase hardware capacity the performance should ideally increase.&lt;/p>
&lt;p>How to spot performance problems ?
Every performance problems is result of some queue building somewhere. Ex: Network socket queue, DB IO queue, OS run queue etc.&lt;/p>
&lt;p>Reasons for queue build up ?&lt;/p>
&lt;ul>
&lt;li>Inefficient slow processing&lt;/li>
&lt;li>Serial resource access&lt;/li>
&lt;li>Limited resource capacity&lt;/li>
&lt;/ul>
&lt;p>So while designing systems identify where queues build up can happen and avoid it.&lt;/p>
&lt;hr>
&lt;h3 id="performance-principles">Performance Principles &lt;a href="#performance-principles" class="hash">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Efficiency :&lt;/p>
&lt;ul>
&lt;li>Efficient resource utilization
&lt;ul>
&lt;li>IO - memory, network, disk&lt;/li>
&lt;li>CPU&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Efficient logic
&lt;ul>
&lt;li>Aglorithms&lt;/li>
&lt;li>DB queries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Efficient data storage
&lt;ul>
&lt;li>Data Structures&lt;/li>
&lt;li>DB schema&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Caching&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Concurrency&lt;/p>
&lt;ul>
&lt;li>Hardware&lt;/li>
&lt;li>Software
&lt;ul>
&lt;li>Quequeing&lt;/li>
&lt;li>Coherence&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Capacity : Identifying a performance problem whether it is a concurrency/efficiency or capacity problem is a hard task.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="system-peformance-objectives">System Peformance Objectives &lt;a href="#system-peformance-objectives" class="hash">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Minimize request-response latency&lt;/p>
&lt;ul>
&lt;li>Latency is measured in time units&lt;/li>
&lt;li>Depends on wait/idle time and processing time&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Maximize throughput&lt;/p>
&lt;ul>
&lt;li>Throughtput is measured as Rate of request processing and depends on latency and capacity.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="performance-measurement-metrics">Performance Measurement Metrics &lt;a href="#performance-measurement-metrics" class="hash">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Latency&lt;/p>
&lt;ul>
&lt;li>Affects : user experience&lt;/li>
&lt;li>Desired : As low as possible&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Throughtput&lt;/p>
&lt;ul>
&lt;li>Affects : number of users that can be supported&lt;/li>
&lt;li>Desired : greater than the request rate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Errors&lt;/p>
&lt;ul>
&lt;li>Affects : functional correctness&lt;/li>
&lt;li>Desired : None&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Resource saturation&lt;/p>
&lt;ul>
&lt;li>Affects : hardware capacity required&lt;/li>
&lt;li>Desired : Efficient utilization of all system resources&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tail latency : Indication of quequing of requets and gets worse with higher workloads&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Measure 99 percentile latency because average latency hides effects of tail latency&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="serial-request-latency">Serial Request Latency &lt;a href="#serial-request-latency" class="hash">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Network Latency&lt;/p>
&lt;ul>
&lt;li>Data Transfer(Global/Regional/Local Network)&lt;/li>
&lt;li>TCP connection - Three way handshake&lt;/li>
&lt;li>SSL/TLS connection - On top of TCP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Minimizing Network Latency&lt;/p>
&lt;ul>
&lt;li>
&lt;p>On Database side:&lt;/p>
&lt;ul>
&lt;li>Connection pool : We can create connection and reuse the connection and reduce connection creation latency.&lt;/li>
&lt;li>Data transfer Overhead : Reduce the size of data or don&amp;rsquo;t transfer the data at all(use cache).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>On client side:&lt;/p>
&lt;ul>
&lt;li>Use Persistent connections&lt;/li>
&lt;li>Static data caching&lt;/li>
&lt;li>Data format and compression&lt;/li>
&lt;li>SSL Session caching : reduce the repeated new connection creation between client and server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Memory Latency&lt;/p>
&lt;ul>
&lt;li>Finite Heap memory : Increase garbage collection frequency&lt;/li>
&lt;li>GC Alogrithm : Use proper alogrithm&lt;/li>
&lt;li>Finite Buffer memory on Database&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Minimizing memory latency&lt;/p>
&lt;ul>
&lt;li>Avoid memory bloat : process should accupy as little memory as possible&lt;/li>
&lt;li>Weak/Soft References : allows GC to destroy the objects when running out of memory&lt;/li>
&lt;li>Multiple smaller processes are better than single process&lt;/li>
&lt;li>Garbage collection algorithm : Different flavors available(live process vs batch process)&lt;/li>
&lt;li>Allocate Finite buffer memory on database to improve database performance
&lt;ul>
&lt;li>Normalization : reduce redundancy&lt;/li>
&lt;li>Compute Over Storage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Disk Latency&lt;/p>
&lt;ul>
&lt;li>Disk access latency - Web server need to access files like html and javascript files which need to loaded from disk and can cause huge latency&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Disk Latency Approaches&lt;/p>
&lt;ul>
&lt;li>Sequential IO and Random IO&lt;/li>
&lt;li>Asynchronous logging&lt;/li>
&lt;li>Static data can handled by reverse proxy(Page cache and Zero copy)&lt;/li>
&lt;li>Query optimization and Indexing&lt;/li>
&lt;li>Data caching&lt;/li>
&lt;li>Hardware Level - SSD Disk, RAID(Parallel Access), Higer Input Output per seconds IOPS.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>CPU Latency&lt;/p>
&lt;ul>
&lt;li>Inefficient Algorithms&lt;/li>
&lt;li>Context Switching&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>CPU Latency Approaches&lt;/p>
&lt;ul>
&lt;li>Batch / Async IO&lt;/li>
&lt;li>Single Threaded Model&lt;/li>
&lt;li>Thread Pool Size&lt;/li>
&lt;li>Multiprocess in Virtual Env&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="concurrent-request-latency">Concurrent Request Latency &lt;a href="#concurrent-request-latency" class="hash">#&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Concurrent Processing
&lt;ul>
&lt;li>Amdhal&amp;rsquo;s Law : Have minimum serial request processing.&lt;/li>
&lt;li>Univsersal Scalability Law : Queueing + Coherence( caching of variables and there synchronization across threads)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/27/performance/</guid><pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate></item><item><title>JVM Profiling</title><link>https://karthikselvam.com/posts/2023/01/25/profiling/</link><description>&lt;p>&lt;strong>1. &lt;a href="https://www.youtube.com/watch?v=7z_R2Aq-Fl8">Introduction to JDK Flight Recorder&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>2. &lt;a href="https://tech.olx.com/jvm-profiling-in-kubernetes-with-java-flight-recorder-b39a6181a99c">JVM Profiling in Kubernetes with Java Flight Recorder&lt;/a>&lt;/strong>&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/25/profiling/</guid><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Streams</title><link>https://karthikselvam.com/posts/2023/01/25/streams/</link><description>&lt;p>In this article, we will solve intervals-related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. Given a list of integers, find the sum of all even numbers.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
int sumOfEvens = numbers.stream()
.filter(n -&amp;gt; n % 2 == 0)
.mapToInt(Integer::intValue)
.sum();
System.out.println(sumOfEvens);
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>2. Given a list of strings, return a list of strings that start with a given letter.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">List&amp;lt;String&amp;gt; myList = new ArrayList&amp;lt;&amp;gt;();
myList.add(&amp;quot;pqr&amp;quot;);
myList.add(&amp;quot;stu&amp;quot;);
myList.add(&amp;quot;vwx&amp;quot;);
myList.add(&amp;quot;yza&amp;quot;);
myList.add(&amp;quot;bcd&amp;quot;);
myList.add(&amp;quot;efg&amp;quot;);
myList.add(&amp;quot;vwxy&amp;quot;);
List&amp;lt;String&amp;gt; result = myList.stream()
.filter(x -&amp;gt; x.startsWith(&amp;quot;v&amp;quot;))
.collect(Collectors.toList());
System.out.println(result);
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>3. Given a list of integers, return a list of their squares.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
List&amp;lt;Integer&amp;gt; result = numbers.stream().map(x -&amp;gt; x * x).collect(Collectors.toList());
System.out.print(result);
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>4. Given a list of strings, return a list of the lengths of those strings.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">List&amp;lt;String&amp;gt; myList = new ArrayList&amp;lt;&amp;gt;();
myList.add(&amp;quot;p&amp;quot;);
myList.add(&amp;quot;st&amp;quot;);
myList.add(&amp;quot;vwx&amp;quot;);
myList.add(&amp;quot;ayza&amp;quot;);
myList.add(&amp;quot;bcead&amp;quot;);
myList.add(&amp;quot;efgass&amp;quot;);
myList.add(&amp;quot;vwxyaefw&amp;quot;);
List&amp;lt;Integer&amp;gt; result = myList.stream().map(x -&amp;gt; x.length()).collect(Collectors.toList());
System.out.print(result);
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>5. Given a list of integers, find the maximum value.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 10, 88, 101, 3, 7, 999);
Integer result = numbers.stream().max(Integer::compare).get();
System.out.println(result);
&lt;/code>&lt;/pre></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/25/streams/</guid><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Understanding OOP concepts</title><link>https://karthikselvam.com/posts/2023/01/25/oops_concepts/</link><description>&lt;p>&lt;strong>1. What is an Object?&lt;/strong>&lt;/p>
&lt;p>An object is an entity in the real world that possesses state (fields) and behaviors (methods). It represents an instance of a class, occupies space in memory, and can communicate with other objects&lt;/p>
&lt;p>&lt;strong>2. What is a Class?&lt;/strong>&lt;/p>
&lt;p>A class is a programming construct that serves as a template or blueprint for creating objects. Unlike objects, classes do not consume memory. Instead, they define the properties and behaviors of objects that can be instantiated multiple times.&lt;/p>
&lt;p>&lt;strong>3. What is a Abstraction?&lt;/strong>&lt;/p>
&lt;p>Abstraction is the concept of exposing to the user only the relevant information while hiding the unnecessary details. This enables the user to focus on what the application does, rather than how it does it.&lt;/p>
&lt;p>Let&amp;rsquo;s consider a real-life example: a man driving a car. The man knows what each pedal does and what the steering wheel does, but he doesn&amp;rsquo;t know how these things are done internally by the car. He doesn&amp;rsquo;t know about the inner mechanisms that empower these things. This is what abstraction is. In Java, abstraction can be achieved via abstract classes and interfaces.&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Car {
public void speedUp();
public void slowDown();
public void turnRight();
public void turnLeft();
public String getCarType();
}
&lt;/code>&lt;/pre>
&lt;p>Next, each type of car should implement the Car interface and override these methods to provide the implementation of these actions. This implementation is hidden from the user (the man driving the car). For example, the ElectricCar class appears as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public class ElectricCar implements Car {
private final String carType;
public ElectricCar(String carType) {
this.carType = carType;
}
@Override
public void speedUp() {
System.out.println(&amp;quot;Speed up the electric car&amp;quot;);
}
@Override
public void slowDown() {
System.out.println(&amp;quot;Slow down the electric car&amp;quot;);
}
@Override
public void turnRight() {
System.out.println(&amp;quot;Turn right the electric car&amp;quot;);
}
@Override
public void turnLeft() {
System.out.println(&amp;quot;Turn left the electric car&amp;quot;);
}
@Override
public String getCarType() {
return this.carType;
}
}
&lt;/code>&lt;/pre>
&lt;p>The user of this class has access to these public methods without being aware of the implementation:&lt;/p>
&lt;pre>&lt;code>public class Main {
public static void main(String[] args) {
Car electricCar = new ElectricCar(&amp;quot;BMW&amp;quot;);
System.out.println(&amp;quot;Driving the electric car: &amp;quot; + electricCar.getCarType() + &amp;quot;\n&amp;quot;);
electricCar.speedUp();
electricCar.turnLeft();
electricCar.slowDown();
}
}
&lt;/code>&lt;/pre>
&lt;p>The output is listed as follows:&lt;/p>
&lt;pre>&lt;code>Driving the electric car: BMW
Speed up the electric car
Turn left the electric car
Slow down the electric car
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>4. What is a Encapsulation?&lt;/strong>&lt;/p>
&lt;p>Encapsulation is a technique whereby the state of an object is hidden from the outside world, and a set of public methods are exposed for accessing this state. Encapsulation is achieved when each object keeps its state private inside a class. It is known as a data-hiding mechanism, and has several important advantages associated with it, such as enabling loosely coupled, reusable, secure, and easy-to-test code.&lt;/p>
&lt;p>In Java, encapsulation is implemented through the use of access modifiers such as public, private, and protected.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Person {
private String name;
private int age;
// Getter method for name
public String getName() {
return name;
}
// Setter method for name
public void setName(String name) {
this.name = name;
}
// Getter method for age
public int getAge() {
return age;
}
// Setter method for age
public void setAge(int age) {
this.age = age;
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have a Person class that encapsulates the state (name and age) of a person object. The state is hidden from the outside world through the use of private access modifiers on the name and age variables. However, public getter and setter methods (getName(), setName(), getAge(), setAge()) are provided for accessing and modifying the state of the object. This allows us to maintain control over the state of the object, ensuring that it remains valid and consistent at all times, while also providing a well-defined interface for other parts of the program to interact with the object.&lt;/p>
&lt;p>&lt;strong>5. What is a Inheritance ?&lt;/strong>&lt;/p>
&lt;p>Inheritance is a fundamental concept in object-oriented programming, which allows one class (the child or subclass) to inherit properties and methods from another class (the parent or superclass). This helps to promote code reuse, reduce duplication, and make the code more modular and easier to maintain.&lt;/p>
&lt;p>In Java, inheritance is achieved through the use of the &lt;strong>extends&lt;/strong> keyword. The child class inherits all the visible properties and methods of the parent class, which can be overridden or extended as needed.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of inheritance in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">public class Animal {
private String name;
private int age;
public Animal(String name, int age) {
this.name = name;
this.age = age;
}
public void eat() {
System.out.println(name + &amp;quot; is eating.&amp;quot;);
}
public void sleep() {
System.out.println(name + &amp;quot; is sleeping.&amp;quot;);
}
}
public class Cat extends Animal {
public Cat(String name, int age) {
super(name, age);
}
public void meow() {
System.out.println(&amp;quot;Meow!&amp;quot;);
}
@Override
public void sleep() {
System.out.println(getName() + &amp;quot; is curling up and sleeping.&amp;quot;);
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have an Animal class that defines common properties and methods for all animals, such as name and age, and eat() and sleep() methods. The Cat class extends the Animal class, inheriting all its properties and methods, and also adds a new meow() method.&lt;/p>
&lt;p>We can now create a Cat object and call its methods like this:&lt;/p>
&lt;pre>&lt;code>Cat cat = new Cat(&amp;quot;Kitty&amp;quot;, 2);
cat.eat(); // Output: Kitty is eating.
cat.sleep(); // Output: Kitty is curling up and sleeping.
cat.meow(); // Output: Meow!
&lt;/code>&lt;/pre>
&lt;p>In this example, the Cat class has overridden the sleep() method inherited from the Animal class, to provide a more specific implementation for cats. This demonstrates the flexibility and extensibility of inheritance, which allows us to modify the behavior of a class to better fit our needs.&lt;/p>
&lt;p>&lt;strong>6. What is a Polymorphism ?&lt;/strong>&lt;/p>
&lt;p>Polymorphism is a concept in object-oriented programming that enables an object to exhibit different behaviors in certain scenarios. This can be achieved through method overloading, which is a form of compile-time polymorphism, or through method overriding, which is a form of runtime polymorphism and is applicable in the case of an IS-A relationship.&lt;/p>
&lt;p>Polymorphism via method overloading(compile time)&lt;/p>
&lt;pre>&lt;code class="language-java">public class Calculator {
public int add(int a, int b) {
return a + b;
}
public double add(double a, double b) {
return a + b;
}
}
&lt;/code>&lt;/pre>
&lt;p>Polymorphism via method overriding(runtime)&lt;/p>
&lt;pre>&lt;code class="language-java">public class Animal {
public void makeSound() {
System.out.println(&amp;quot;Animal makes a sound&amp;quot;);
}
}
public class Dog extends Animal {
@Override
public void makeSound() {
System.out.println(&amp;quot;Dog barks&amp;quot;);
}
}
public class Cat extends Animal {
@Override
public void makeSound() {
System.out.println(&amp;quot;Cat meows&amp;quot;);
}
}
public class Main {
public static void main(String[] args) {
Animal animal1 = new Dog();
Animal animal2 = new Cat();
animal1.makeSound(); // Output: Dog barks
animal2.makeSound(); // Output: Cat meows
}
}
&lt;/code>&lt;/pre>
&lt;p>In the example above, we have an Animal class and two subclasses, Dog and Cat, that extend it. The makeSound method is overridden in each subclass to produce a different sound. In the Main class, we create an instance of Dog and Cat but assign them to variables of type Animal. When the makeSound method is called on each of these objects, the appropriate overridden version of the method is executed, producing &amp;ldquo;Dog barks&amp;rdquo; and &amp;ldquo;Cat meows&amp;rdquo; as output, respectively. This is an example of polymorphism as the same method is called on objects of different types, but the behavior is different depending on the actual type of the object at runtime.&lt;/p>
&lt;p>&lt;strong>7. What is a Association ?&lt;/strong>&lt;/p>
&lt;p>Association is a concept in object-oriented programming that describes the relationship between two classes that are independent of each other. An association does not have an owner, and it can take different forms, including one-to-one, one-to-many, many-to-one, and many-to-many, depending on the cardinality and multiplicity of the relationship between the two classes.&lt;/p>
&lt;p>Here is an example of association in Java using a one-to-many relationship:&lt;/p>
&lt;pre>&lt;code class="language-java">public class Library {
private List&amp;lt;Book&amp;gt; books;
public Library() {
books = new ArrayList&amp;lt;&amp;gt;();
}
public void addBook(Book book) {
books.add(book);
}
}
public class Book {
private String title;
private String author;
public Book(String title, String author) {
this.title = title;
this.author = author;
}
// getters and setters
}
&lt;/code>&lt;/pre>
&lt;p>In this example, the Library class has an association with the Book class. The Library class has a list of Book objects, and it provides a method addBook() to add a book to the list. This is an example of a one-to-many association because a Library can have many Book objects in its list.&lt;/p>
&lt;p>The Book class, on the other hand, has no knowledge of the Library class. It simply defines the properties of a book such as its title and author. This is an example of unidirectional association.&lt;/p>
&lt;p>&lt;strong>8. What is a Aggregation ?&lt;/strong>&lt;/p>
&lt;p>Aggregation is one of the core concepts of OOP. Mainly, aggregation is a special case of unidirectional association. While an association defines the relationship between two classes independent of one another, aggregation represents a HAS-A relationship between these two classes. In other words, two aggregated objects have their own life cycle, but one of the objects is the owner of the HAS-A relationship. Having their own life cycle means that ending one object will not affect the other object. For example, a TennisPlayer has a Racket. This is a unidirectional association since a Racket cannot have a TennisPlayer. Even if the TennisPlayer dies, the Racket is not affected.&lt;/p>
&lt;p>For example, a TennisPlayer has a Racket. This is a unidirectional association since a Racket cannot have a TennisPlayer. Even if the TennisPlayer dies, the Racket is not affected.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Racket {
private String type;
private int size;
private int weight;
public Racket(String type, int size, int weight) {
this.type = type;
this.size = size;
this.weight = weight;
}
// getters and setters omitted for brevity
}
&lt;/code>&lt;/pre>
&lt;p>A TennisPlayer HAS-A Racket. Therefore, the TennisPlayer class must be capable of receiving a Racket as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public class TennisPlayer {
private String name;
private Racket racket;
public TennisPlayer(String name, Racket racket) {
this.name = name;
this.racket = racket
}
// getters and setters omitted for brevity
}
&lt;/code>&lt;/pre>
&lt;p>Next, we create a Racket and a TennisPlayer that uses this Racket:&lt;/p>
&lt;pre>&lt;code class="language-java">public static void main(String[] args) {
Racket racket = new Racket(&amp;quot;Babolat Pure Aero&amp;quot;, 100, 300);
TennisPlayer player = new TennisPlayer(&amp;quot;Rafael Nadal&amp;quot;, racket);
System.out.println(&amp;quot;Player &amp;quot; + player.getName() + &amp;quot; plays with &amp;quot; + player.getRacket().getType());
}
&lt;/code>&lt;/pre>
&lt;p>The output is as follows:&lt;/p>
&lt;pre>&lt;code>Player Rafael Nadal plays with Babolat Pure Aero
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>9. What is a Composition ?&lt;/strong>&lt;/p>
&lt;p>Composition is one of the core concepts of OOP. Primarily, composition is a more restrictive case of aggregation. While aggregation represents a HAS-A relationship between two objects having their own life cycle, composition represents a HAS-A relationship that contains an object that cannot exist on its own. In order to highlight this coupling, the HAS-A relationship can be named PART-OF as well. For example, a Car has an Engine. In other words, the engine is PART-OF the car. If the car is destroyed, then the engine is destroyed as well. Composition is said to be better than inheritance because it sustains code reuse and the visibility control of objects.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Engine {
private String type;
private int horsepower;
public Engine(String type, int horsepower) {
this.type = type;
this.horsepower = horsepower;
}
// getters and setters omitted for brevity
}
&lt;/code>&lt;/pre>
&lt;p>Next, we have the Car class. Check out the constructor of this class. Since Engine is part of Car, we create it with the Car.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Car {
private final String name;
private final Engine engine;
public Car(String name) {
this.name = name;
Engine engine = new Engine(&amp;quot;petrol&amp;quot;, 300);
this.engine=engine;
}
public int getHorsepower() {
return engine.getHorsepower();
}
public String getName() {
return name;
}
}
&lt;/code>&lt;/pre>
&lt;p>we can test composition from the main() method as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public static void main(String[] args) {
Car car = new Car(&amp;quot;MyCar&amp;quot;);
System.out.println(&amp;quot;Horsepower: &amp;quot; + car.getHorsepower());
}
&lt;/code>&lt;/pre>
&lt;p>output is as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">Horsepower: 300
&lt;/code>&lt;/pre>
&lt;p>That&amp;rsquo;s it for OOPS.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/25/oops_concepts/</guid><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Understanding SOLID Principles</title><link>https://karthikselvam.com/posts/2023/01/24/solid_principles/</link><description>&lt;p>SOLID is an acronym of the following:&lt;/p>
&lt;ol>
&lt;li>S: Single Responsibility Principle&lt;/li>
&lt;li>O: Open Closed Principle&lt;/li>
&lt;li>L: Liskov&amp;rsquo;s Substitution Principle&lt;/li>
&lt;li>I: Interface Segregation Principle&lt;/li>
&lt;li>D: Dependency Inversion Principle&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>1. What is Single Responsibility Principle ?&lt;/strong>&lt;/p>
&lt;p>S stands for One class should have one, and only one, responsibility. S tells us to write a class for only one goal. As long as we write a class for only one goal, we will sustain high maintainability and visibility control across the application modules. In other words, by sustaining high maintainability, this principle has a significant business impact, and by providing visibility control across the application modules, this principle sustains encapsulation.&lt;/p>
&lt;p>For example, the following class computes the area and converts it to inches:&lt;/p>
&lt;pre>&lt;code class="language-java">public class RectangleAreaCalculator {
private static final double INCH_TERM = 0.0254d;
private final int width;
private final int height;
public RectangleAreaCalculator(int width, int height) {
this.width = width;
this.height = height;
}
public int area() {
return width * height;
}
// this method breaks SRP
public double metersToInches(int area) {
return area / INCH_TERM;
}
}
&lt;/code>&lt;/pre>
&lt;p>The situation can be remedied by removing the metersToInches() method from RectangleAreaCalculator, as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public class RectangleAreaCalculator {
private final int width;
private final int height;
public RectangleAreaCalculator(int width, int height) {
this.width = width;
this.height = height;
}
public int area() {
return width * height;
}
}
&lt;/code>&lt;/pre>
&lt;p>Now, RectangleAreaCalculator does only one thing (it computes the rectangle area), thereby observing the SRP.&lt;/p>
&lt;p>Next, metersToInches() can be extracted in a separate class.&lt;/p>
&lt;pre>&lt;code class="language-java">public class AreaConverter {
private static final double INCH_TERM = 0.0254d;
private static final double FEET_TERM = 0.3048d;
public double metersToInches(int area) {
return area / INCH_TERM;
}
public double metersToFeet(int area) {
return area / FEET_TERM;
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>2. What is Open Closed Principle ?&lt;/strong>&lt;/p>
&lt;p>O stands for Software components should be open for extension, but closed for modification. O sustains the fact that our classes should not contain constraints that will require other developers to modify our classes in order to accomplish their job – other developers should only extend our classes to accomplish their job.&lt;/p>
&lt;p>Each shape will implement the Shape interface. Therefore, the code is pretty straightforward:&lt;/p>
&lt;pre>&lt;code class="language-java"> public interface Shape {
}
public class Rectangle implements Shape {
private final int width;
rivate final int height;
// constructor and getters omitted for brevity
}
public class Circle implements Shape {
private final int radius;
// constructor and getter omitted for brevity
}
&lt;/code>&lt;/pre>
&lt;p>At this point, we can easily use the constructors of these classes to create rectangles and circles of different sizes. Once we have several shapes, we want to sum their areas. For this, we can define an AreaCalculator class as follows:&lt;/p>
&lt;pre>&lt;code class="language-java"> public class AreaCalculator {
private final List&amp;lt;Shape&amp;gt; shapes;
public AreaCalculator(List&amp;lt;Shape&amp;gt; shapes) {
this.shapes = shapes;
}
// adding more shapes requires us to modify this class
// this code is not OCP compliant
public double sum() {
int sum = 0;
for (Shape shape : shapes) {
if (shape.getClass().equals(Circle.class)) {
sum += Math.PI * Math.pow(((Circle) shape).getRadius(), 2);
} else
if(shape.getClass().equals(Rectangle.class)) {
sum += ((Rectangle) shape).getHeight() * ((Rectangle) shape).getWidth();
}
}
return sum;
}
}
&lt;/code>&lt;/pre>
&lt;p>Since each shape has its own formula for area, we require an if-else (or switch) structure to determine the type of shape. Furthermore, if we want to add a new shape (for example, a triangle), we have to modify the AreaCalculator class to add a new if case. This means that the preceding code breaks the OCP.&lt;/p>
&lt;p>The main idea is to extract from AreaCalculator the area formula of each shape in the corresponding Shape class. Hence, the rectangle will compute its area, the circle as well, and so on. To enforce the fact that each shape must calculate its area, we add the area() method to the Shape contract:&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Shape {
public double area();
}
&lt;/code>&lt;/pre>
&lt;p>Next, Rectangle and Circle implements Shape as follows:&lt;/p>
&lt;pre>&lt;code class="language-java"> public class Rectangle implements Shape {
private final int width;
private final int height;
public Rectangle(int width, int height) {
this.width = width;
this.height = height;
}
public double area() {
return width * height;
}
}
public class Circle implements Shape {
private final int radius;
public Circle(int radius) {
this.radius = radius;
}
@Override
public double area() {
return Math.PI * Math.pow(radius, 2);
}
}
&lt;/code>&lt;/pre>
&lt;p>Now, the AreaCalculator can loop the list of shapes and sum the areas by calling the proper area() method.&lt;/p>
&lt;pre>&lt;code class="language-java">public class AreaCalculator {
private final List&amp;lt;Shape&amp;gt; shapes;
public AreaCalculator(List&amp;lt;Shape&amp;gt; shapes) {
this.shapes = shapes;
}
public double sum() {
int sum = 0;
for (Shape shape : shapes) {
sum += shape.area();
}
return sum;
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>3. What is Liskov&amp;rsquo;s Substitution Principle ?&lt;/strong>&lt;/p>
&lt;p>L stands for Derived types must be completely substitutable for their base types. L sustains the fact that objects of subclasses must behave in the same way as the objects of superclasses, so every subclass (or derived class) should be capable of substituting their superclass without any issues. Most of the time, this is useful for runtime-type identification followed by the cast. For example, consider foo(p), where p is of the type T. Then, foo(q) should work fine if q is of the type S and S is a subtype of T.&lt;/p>
&lt;p>Suppose we have a class hierarchy for different shapes, with a base class Shape and two derived classes Circle and Rectangle. Each class has a method area() to calculate the area of the shape.&lt;/p>
&lt;pre>&lt;code class="language-java">public abstract class Shape {
public abstract double area();
}
public class Circle extends Shape {
private double radius;
public Circle(double radius) {
this.radius = radius;
}
@Override
public double area() {
return 3.14 * radius * radius;
}
}
public class Rectangle extends Shape {
private double length;
private double width;
public Rectangle(double length, double width) {
this.length = length;
this.width = width;
}
@Override
public double area() {
return length * width;
}
}
&lt;/code>&lt;/pre>
&lt;p>Now suppose we have a method calculateTotalArea that takes an array of shapes and returns the total area of all the shapes in the array:&lt;/p>
&lt;pre>&lt;code>public static double calculateTotalArea(Shape[] shapes) {
double totalArea = 0.0;
for (Shape shape : shapes) {
totalArea += shape.area();
}
return totalArea;
}
&lt;/code>&lt;/pre>
&lt;p>According to Liskov&amp;rsquo;s Substitution Principle, we should be able to pass an array of Circle or Rectangle objects to this method without any problems, since both classes inherit from the Shape base class and implement the area() method.&lt;/p>
&lt;pre>&lt;code>Circle circle = new Circle(5);
Rectangle rectangle = new Rectangle(3, 4);
Shape[] shapes = {circle, rectangle};
double totalArea = calculateTotalArea(shapes); // returns 83.5
&lt;/code>&lt;/pre>
&lt;p>This demonstrates that the Circle and Rectangle classes can be used interchangeably with the Shape class, without causing any errors or unexpected behavior in the program.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. What is Interface Segregation Principle ?&lt;/strong>&lt;/p>
&lt;p>I stands for the Interface Segregation Principle (ISP). I stands for Clients should not be forced to implement unnecessary methods that they will not use.&lt;/p>
&lt;p>This principle stands for Clients should not be forced to implement unnecessary methods that they will not use. In other words, we should split an interface into two or more interfaces until clients are not forced to implement methods that they will not use. For example, consider the Connection interface, which has three methods: connect(), socket(), and http().&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Connection {
public void socket();
public void http();
public void connect();
}
&lt;/code>&lt;/pre>
&lt;p>WwwPingConnection is a class that pings different websites via HTTP; hence, it requires the http() method, but doesn&amp;rsquo;t need the socket() method. Notice the dummy socket() implementation – since WwwPingConnection implements Connection, it is forced to provide an implementation to the socket() method as well:&lt;/p>
&lt;pre>&lt;code class="language-java">public class WwwPingConnection implements Connection {
private final String www;
public WwwPingConnection(String www) {
this.www = www;
}
@Override
public void http() {
System.out.println(&amp;quot;Setup an HTTP connection to &amp;quot; + www);
}
@Override
public void connect() {
System.out.println(&amp;quot;Connect to &amp;quot; + www);
}
// this method breaks Interface Segregation Principle
@Override
public void socket() {
}
}
&lt;/code>&lt;/pre>
&lt;p>Having an empty implementation or throwing a meaningful exception from methods that are not needed, such as socket(), is a really ugly solution. Check the following code:&lt;/p>
&lt;pre>&lt;code>WwwPingConnection www = new WwwPingConnection 'www.yahoo.com');
www.socket(); // we can call this method!
www.connect();
&lt;/code>&lt;/pre>
&lt;p>What do we expect to obtain from this code? A working code that does nothing, or an exception caused by the connect() method because there is no HTTP endpoint? Or, we can throw an exception from socket() of the type: Socket is not supported!. Then, why is it here?! Hence, it is now time to refactor the code to follow the ISP. In order to comply with the ISP, we need to segregate the Connection interface. Since the connect() method is required by any client, we leave it in this interface.&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Connection {
public void connect();
}
&lt;/code>&lt;/pre>
&lt;p>The http() and socket() methods are distributed in to separate interfaces that extend the Connection interface as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public interface HttpConnection extends Connection {
public void http();
}
public interface SocketConnection extends Connection {
public void socket();
}
&lt;/code>&lt;/pre>
&lt;p>This time, the WwwPingConnection class can implement only the HttpConnection interface and use the http() method:&lt;/p>
&lt;pre>&lt;code class="language-java">public class WwwPingConnection implements HttpConnection {
private final String www;
public WwwPingConnection(String www) {
this.www = www;
}
@Override
public void http() {
System.out.println(&amp;quot;Setup an HTTP connection to &amp;quot; + www);
}
@Override
public void connect() {
System.out.println(&amp;quot;Connect to &amp;quot; + www);
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>5. What is Dependency Inversion Principle ?&lt;/strong>&lt;/p>
&lt;p>D stands for the Dependency Inversion Principle. This principle stands for Depend on abstractions, not on concretions. This means that we should rely on abstract layers to bind concrete modules together instead of having concrete modules that depend on other concrete modules. To accomplish this, all concrete modules should expose abstractions only.&lt;/p>
&lt;p>A database JDBC URL, PostgreSQLJdbcUrl, can be a low-level module, while a class that connects to the database may represent a high-level module, such as ConnectToDatabase#connect().&lt;/p>
&lt;pre>&lt;code class="language-java">public class PostgreSQLJdbcUrl {
private final String dbName;
public PostgreSQLJdbcUrl(String dbName) {
this.dbName = dbName;
}
public String get() {
return &amp;quot;jdbc:// ... &amp;quot; + this.dbName;
}
}
public class ConnectToDatabase {
public void connect(PostgreSQLJdbcUrl postgresql) {
System.out.println(&amp;quot;Connecting to &amp;quot; + postgresql.get());
}
}
&lt;/code>&lt;/pre>
&lt;p>If we create another type of JDBC URL (for example, MySQLJdbcUrl), then we cannot use the preceding connect(PostgreSQLJdbcUrl postgreSQL) method. So, we have to drop this dependency on concrete and create a dependency on abstraction.&lt;/p>
&lt;p>The abstraction can be represented by an interface that should be implemented by each type of JDBC URL&lt;/p>
&lt;pre>&lt;code>public interface JdbcUrl {
public String get();
}
&lt;/code>&lt;/pre>
&lt;p>Next, PostgreSQLJdbcUrl implements JdbcUrl to return a JDBC URL specific to PostgreSQL databases:&lt;/p>
&lt;pre>&lt;code class="language-java">public class PostgreSQLJdbcUrl implements JdbcUrl {
private final String dbName;
public PostgreSQLJdbcUrl(String dbName) {
this.dbName = dbName;
}
@Override
public String get() {
return &amp;quot;jdbc:// ... &amp;quot; + this.dbName;
}
}
&lt;/code>&lt;/pre>
&lt;p>In precisely the same manner, we can write MySQLJdbcUrl, OracleJdbcUrl, and so on. Finally, the ConnectToDatabase#connect() method is dependent on the JdbcUrl abstraction, so it can connect to any JDBC URL that implements this abstraction.&lt;/p>
&lt;pre>&lt;code class="language-java">public class ConnectToDatabase {
public void connect(JdbcUrl jdbcUrl) {
System.out.println(&amp;quot;Connecting to &amp;quot; + jdbcUrl.get());
}
}
&lt;/code>&lt;/pre>
&lt;p>That&amp;rsquo;s it, now you have solid understanding of SOLID principles.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/24/solid_principles/</guid><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Capacity Estimation on the fly</title><link>https://karthikselvam.com/posts/2023/01/23/capacity_estimation/</link><description>&lt;p>Capacity estimation is a crucial component of system design interviews, and it can be quite challenging if one is not adequately prepared. However, with the right approach, it is possible to accurately estimate the storage, bandwidth, and memory/cache requirements needed for a particular system. This article provides a comprehensive framework for capacity estimation, which will enable you to confidently tackle capacity-related questions during system design interviews.&lt;/p>
&lt;p>Typically following estimates are required :&lt;/p>
&lt;ol>
&lt;li>Storage&lt;/li>
&lt;li>Bandwidth&lt;/li>
&lt;li>Memory/Cache&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Assumptions:&lt;/p>
&lt;p>&lt;strong>1. Storage Estimates&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Single character requires 2 bytes, while long and double require 8 bytes of space.&lt;/li>
&lt;li>An average photo takes up 200 KB of space, while a high-quality photo takes up 2 MB of space.&lt;/li>
&lt;li>For videos, we assume 50 MB of space per minute of video.&lt;/li>
&lt;/ul>
&lt;p>Examples:&lt;/p>
&lt;ul>
&lt;li>Social media: tweet can be assumed 140 char then 140*2 bytes = 280 bytes tweet.&lt;/li>
&lt;li>Tiny URL: Average URL length &amp;lt;100 char. Longer URLs needing tiny URL will generally be more than 150 char, lets say 200 char. then each URL assume as 200*2 = 400 bytes&lt;/li>
&lt;li>Database id or price etc field can be double or long so 8 bytes per field.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. Traffic estimates&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>For social media applications like Facebook, Instagram, Twitter we can assume 1 billion total users, with 500 million daily active users.&lt;/li>
&lt;li>A chat application like WhatsApp, and Facebook Messenger, has 500 million total users, with 100 million daily active users.&lt;/li>
&lt;li>For video streaming applications like YouTube, Netflix, and Hulu, we can assume 1 billion total users, with 800 million daily active users.&lt;/li>
&lt;li>For cloud or file storage applications like Google Drive, Dropbox, and Microsoft OneDrive, we can assume 1 billion total users, with 500 million daily active users.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>3. Time Assumptions&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A year has 365 days, so 5 years have 1825 days, which we round up to 2000 days.&lt;/li>
&lt;li>A day has 24 hours, which is 86400 seconds, which we round up to 100,000 seconds.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Capacity Estimation for Social Media application&lt;/strong>&lt;/p>
&lt;p>Assuming each post or tweet has 140 characters, and each character requires 2 bytes, each tweet or post has a size of approximately 300 bytes. Let’s assume 1 billion total users and 500 million daily active users, we can assume that 10 million users post photos daily, with an average size of 200 KB. Using these assumptions, we can calculate the following:&lt;/p>
&lt;p>&lt;strong>Storage&lt;/strong>:
Text data storage: 300 bytes x 500,000,000 = 150,000,000,000 = 150 GB of tweet/post data per day
Photo storage: 200 KB x 10,000,000 = 2,000 GB = 2 TB per day.&lt;/p>
&lt;p>Total storage for 5 years: 150 GB x 2000 days = 300,000 GB = 300 TB for tweet/post data, and 2 TB x 2000 days = 4,000 TB for photos.&lt;/p>
&lt;p>&lt;strong>Bandwidth&lt;/strong>:
Text data bandwidth: 150 GB per day / 100,000 seconds = 1.5 MB per second
Photo bandwidth: 2 TB per day / 100,000 seconds = 200 MB per second&lt;/p>
&lt;p>&lt;strong>Memory/Cache&lt;/strong>:
Assuming we want to cache 20 posts/tweets per user, 300 bytes * 500,000,000 daily users * 20 = 150 GB * 20 = 3000 GB = 3 TB of cache. If one machine/server can keep 150 GB of cache, we need 20 machines/servers for caching.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Capacity Estimation for TinyURL&lt;/strong>&lt;/p>
&lt;p>Assuming the average length of a URL is 100 characters, and each character requires 2 bytes, each URL has a size of approximately 200 bytes. Let’s assume 1 billion total users, 100 million daily active users. So 100 million urls are generated per day. Using these assumptions, we can calculate the following:&lt;/p>
&lt;p>&lt;strong>Storage&lt;/strong>:
URL data storage: 200 bytes x 100,000,000 = 20,000,000,000 = 20 GB per day&lt;/p>
&lt;p>Total storage for 5 years: 20 GB per day x 2000 days = 40,000 GB = 40 TB&lt;/p>
&lt;p>&lt;strong>Bandwidth&lt;/strong>:
URL bandwidth: 20 GB per day / 100,000 seconds = 0.2 MB per second.&lt;/p>
&lt;p>&lt;strong>Memory/Cache&lt;/strong>:
Assuming we want to cache 20 urls per user, 200 bytes * 100,000,000 daily users * 20 = 20 GB * 20 = 400 GB of cache. If one machine/server can keep 150 GB of cache, we need 3 machines/servers for caching.&lt;/p>
&lt;p>The framework outlined above provides a clear approach to tackle capacity estimation problems during interviews.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/23/capacity_estimation/</guid><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Fundamentals of Multithreading</title><link>https://karthikselvam.com/posts/2023/01/23/threads/</link><description>&lt;p>&lt;strong>1. Thread creation&lt;/strong> : In Java, you can create a thread by either extending the Thread class or implementing the Runnable interface. Here&amp;rsquo;s how you can do it:&lt;/p>
&lt;ul>
&lt;li>Extending the Thread class:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-java">public class MyThread extends Thread {
public void run() {
// code to be executed in this thread
}
}
&lt;/code>&lt;/pre>
&lt;p>You can create an instance of the MyThread class and start the thread using the start() method:&lt;/p>
&lt;pre>&lt;code class="language-java">MyThread myThread = new MyThread();
myThread.start();
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Implementing the Runnable interface:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-java">public class MyRunnable implements Runnable {
public void run() {
// code to be executed in this thread
}
}
&lt;/code>&lt;/pre>
&lt;p>You can create an instance of the MyRunnable class and pass it to a Thread object&amp;rsquo;s constructor:&lt;/p>
&lt;pre>&lt;code class="language-java">MyRunnable myRunnable = new MyRunnable();
Thread thread = new Thread(myRunnable);
thread.start();
&lt;/code>&lt;/pre>
&lt;p>In both cases, the run() method contains the code that will be executed when the thread is started. You should not call the run() method directly, but rather use the start() method to start the thread.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. Thread Termination&lt;/strong> :
Following are reasons to terminate a thread:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Threads in a computer consume various resources, such as memory, kernel resources, CPU cycles, and cache memory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If a thread finished its work, but the application is still running we want to clean up the thread&amp;rsquo;s resources.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If a thread is misbehaving, we want to stop it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The application will not stop as long as at least one thread is still running.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In Java, you can terminate a thread by calling the interrupt() method on the thread object. This method sets a flag on the thread to indicate that it should stop executing. However, it is up to the thread&amp;rsquo;s code to check for the interrupt flag and terminate gracefully.&lt;/p>
&lt;pre>&lt;code class="language-java">public class MyThread extends Thread {
@Override
public void run() {
while (!Thread.currentThread().isInterrupted()) {
// do some work
}
System.out.println(&amp;quot;Thread is terminating.&amp;quot;);
}
}
public class Main {
public static void main(String[] args) {
MyThread thread = new MyThread();
thread.start();
// Interrupt the thread
thread.interrupt();
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, the MyThread class extends the Thread class and overrides the run() method to do some work in a loop. Inside the loop, the thread checks if it has been interrupted using the isInterrupted() method.&lt;/p>
&lt;p>In the Main class, we create an instance of MyThread and start it. When the interrupt() method is called, the isInterrupted() method in the MyThread class will return true, causing the thread to exit the loop and terminate gracefully.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. Daemon Threads&lt;/strong> :
In Java, a daemon thread is a type of thread that runs in the background and does not prevent the Java Virtual Machine (JVM) from exiting when the program finishes execution.&lt;/p>
&lt;p>Daemon threads are typically used for tasks that need to run continuously in the background, such as garbage collection or other system-level tasks. They are also commonly used in server applications to perform tasks like cleaning up old connections or handling periodic maintenance tasks.&lt;/p>
&lt;p>To create a daemon thread in Java, you can use the setDaemon() method on a Thread object. For example, the following code creates a new thread and sets it as a daemon thread:&lt;/p>
&lt;pre>&lt;code class="language-java">Thread myThread = new Thread(new Runnable() {
public void run() {
// Do some background task here
}
});
myThread.setDaemon(true);
myThread.start();
&lt;/code>&lt;/pre>
&lt;p>Once a thread is set as a daemon thread, you cannot change it back to a non-daemon thread.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. Joining Threads&lt;/strong> :&lt;/p>
&lt;p>Joining threads in Java is done using the join() method, which allows one thread to wait for another thread to complete before continuing. Here&amp;rsquo;s a simple example of how to use the join() method to join two threads:&lt;/p>
&lt;pre>&lt;code class="language-java">public class JoinExample {
public static void main(String[] args) throws InterruptedException {
Thread t1 = new Thread(() -&amp;gt; {
System.out.println(&amp;quot;Thread 1 is running&amp;quot;);
try {
Thread.sleep(2000); // simulate some work being done
} catch (InterruptedException e) {
System.out.println(&amp;quot;Thread 1 was interrupted&amp;quot;);
}
System.out.println(&amp;quot;Thread 1 is finished&amp;quot;);
});
Thread t2 = new Thread(() -&amp;gt; {
System.out.println(&amp;quot;Thread 2 is running&amp;quot;);
try {
Thread.sleep(1000); // simulate some work being done
} catch (InterruptedException e) {
System.out.println(&amp;quot;Thread 2 was interrupted&amp;quot;);
}
System.out.println(&amp;quot;Thread 2 is finished&amp;quot;);
});
t1.start();
t2.start();
// wait for both threads to finish
t1.join();
t2.join();
System.out.println(&amp;quot;Both threads have finished&amp;quot;);
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we create two threads t1 and t2 and start them. We then use the join() method to wait for both threads to finish before printing out a message indicating that both threads have finished.&lt;/p>
&lt;p>When t1.join() and t2.join() are called, the main thread will block and wait until both t1 and t2 have finished executing. Once both threads have completed, the main thread will continue executing and print out the final message.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. Resource Sharing in Threads&lt;/strong>&lt;/p>
&lt;p>In Java, resource sharing can be achieved using the concept of synchronized monitors. A synchronized monitor is a mechanism that allows only one thread to access a shared resource at a time.&lt;/p>
&lt;p>To use synchronized monitors in Java, you can use the synchronized keyword to define a block of code that needs to be executed by only one thread at a time. The synchronized keyword can be applied to a method or a block of code.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of using synchronized monitors to share a resource in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">public class SharedResource {
private int value;
public synchronized void increment() {
value++;
}
public synchronized int getValue() {
return value;
}
}
public class ResourceSharingExample {
public static void main(String[] args) {
SharedResource sharedResource = new SharedResource();
// create multiple threads to access the shared resource
Thread t1 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 1000; i++) {
sharedResource.increment();
}
});
Thread t2 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 1000; i++) {
sharedResource.increment();
}
});
// start the threads
t1.start();
t2.start();
// wait for the threads to finish
try {
t1.join();
t2.join();
} catch (InterruptedException e) {
e.printStackTrace();
}
// print the final value of the shared resource
System.out.println(&amp;quot;Value: &amp;quot; + sharedResource.getValue());
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, the SharedResource class represents a shared resource that contains a single integer value. The increment() method and getValue() method are both marked as synchronized, which means that only one thread can access them at a time.&lt;/p>
&lt;p>The ResourceSharingExample class creates two threads that access the shared resource using the increment() method. The threads run concurrently, but because of the synchronized monitors, only one thread can execute the increment() method at a time. The final value of the shared resource is printed at the end of the program, which should be 2000 in this case.&lt;/p>
&lt;p>We also achieve some result using Object lock instead of synchronized monitors in Java.&lt;/p>
&lt;pre>&lt;code class="language-java">public class SharedResource {
private int value;
private final Object lock = new Object();
public void increment() {
synchronized (lock) {
value++;
}
}
public int getValue() {
synchronized (lock) {
return value;
}
}
}
public class ResourceSharingExample {
public static void main(String[] args) {
SharedResource sharedResource = new SharedResource();
// create multiple threads to access the shared resource
Thread t1 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 1000; i++) {
sharedResource.increment();
}
});
Thread t2 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 1000; i++) {
sharedResource.increment();
}
});
// start the threads
t1.start();
t2.start();
// wait for the threads to finish
try {
t1.join();
t2.join();
} catch (InterruptedException e) {
e.printStackTrace();
}
// print the final value of the shared resource
System.out.println(&amp;quot;Value: &amp;quot; + sharedResource.getValue());
}
}
&lt;/code>&lt;/pre>
&lt;p>Using mutiple object locks threads can access the shared resources concurrently without interfering with each other.&lt;/p>
&lt;pre>&lt;code class="language-java">public class SharedResource {
private int value1;
private int value2;
private final Object lock1 = new Object();
private final Object lock2 = new Object();
public void incrementValue1() {
synchronized (lock1) {
value1++;
}
}
public int getValue1() {
synchronized (lock1) {
return value1;
}
}
public void incrementValue2() {
synchronized (lock2) {
value2++;
}
}
public int getValue2() {
synchronized (lock2) {
return value2;
}
}
}
public class ResourceSharingExample {
public static void main(String[] args) {
SharedResource sharedResource = new SharedResource();
// create multiple threads to access the shared resource
Thread t1 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 1000; i++) {
sharedResource.incrementValue1();
}
});
Thread t2 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 1000; i++) {
sharedResource.incrementValue2();
}
});
// start the threads
t1.start();
t2.start();
// wait for the threads to finish
try {
t1.join();
t2.join();
} catch (InterruptedException e) {
e.printStackTrace();
}
// print the final values of the shared resources
System.out.println(&amp;quot;Value1: &amp;quot; + sharedResource.getValue1());
System.out.println(&amp;quot;Value2: &amp;quot; + sharedResource.getValue2());
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, the SharedResource class contains two object locks, lock1 and lock2, and two methods for each value, incrementValue1(), getValue1(), incrementValue2(), and getValue2(). The incrementValue1() method and getValue1() method use lock1 to synchronize access to value1, while the incrementValue2() method and getValue2() method use lock2 to synchronize access to value2.&lt;/p>
&lt;p>The ResourceSharingExample class creates two threads that access the shared resources using incrementValue1() and incrementValue2() methods. Because two different object locks are used to synchronize access to two different values, the &lt;strong>threads can access the shared resources concurrently without interfering with each other&lt;/strong>. The final values of the shared resources are printed at the end of the program.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>6. Reentrant lock&lt;/strong>&lt;/p>
&lt;p>A ReentrantLock is a synchronization mechanism in Java that provides a way to protect shared resources from simultaneous access by multiple threads. It is called &amp;ldquo;reentrant&amp;rdquo; because a thread that already holds the lock can acquire it again without blocking, unlike traditional synchronization using the synchronized keyword.&lt;/p>
&lt;pre>&lt;code class="language-java">import java.util.concurrent.locks.ReentrantLock;
public class SharedResource {
private int value;
private ReentrantLock lock = new ReentrantLock();
public void incrementValue() {
lock.lock();
try {
value++;
} finally {
lock.unlock();
}
}
public int getValue() {
lock.lock();
try {
return value;
} finally {
lock.unlock();
}
}
}
public class ResourceSharingExample {
public static void main(String[] args) {
SharedResource sharedResource = new SharedResource();
// create multiple threads to access the shared resource
Thread t1 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 1000; i++) {
sharedResource.incrementValue();
}
});
Thread t2 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 1000; i++) {
sharedResource.incrementValue();
}
});
// start the threads
t1.start();
t2.start();
// wait for the threads to finish
try {
t1.join();
t2.join();
} catch (InterruptedException e) {
e.printStackTrace();
}
// print the final value of the shared resource
System.out.println(&amp;quot;Value: &amp;quot; + sharedResource.getValue());
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, the SharedResource class contains a single ReentrantLock and two methods for incrementing and retrieving the value variable. The lock object is used to synchronize access to the value variable.&lt;/p>
&lt;p>The ResourceSharingExample class creates two threads that access the shared resource using the incrementValue() method. Because a ReentrantLock is used to synchronize access to the shared resource, the threads can access the shared resource concurrently without interfering with each other.&lt;/p>
&lt;p>ReentrantLock is like a special key that allows threads to take turns accessing a shared resource. And if a thread already has the key, it can use it again without waiting in line. It provides query methods for testing lock&amp;rsquo;s internal state.&lt;/p>
&lt;p>Example of using ReentrantLock and tryLock() method in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">import java.util.concurrent.locks.ReentrantLock;
public class Example {
public static void main(String[] args) {
ReentrantLock lock = new ReentrantLock();
// acquire the lock using tryLock() method
boolean isLockAcquired = lock.tryLock();
if (isLockAcquired) {
try {
// perform critical section operations here
System.out.println(&amp;quot;Lock acquired and critical section entered.&amp;quot;);
} finally {
// release the lock
lock.unlock();
System.out.println(&amp;quot;Lock released.&amp;quot;);
}
} else {
System.out.println(&amp;quot;Could not acquire lock. Another thread is holding the lock.&amp;quot;);
}
}
}
&lt;/code>&lt;/pre>
&lt;p>Example of using ReentrantReadWriteLock and tryLock() method in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
public class Example {
private Map&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
private ReadWriteLock lock = new ReentrantReadWriteLock();
public void put(String key, String value) {
lock.writeLock().lock(); // acquire write lock
try {
map.put(key, value); // perform write operation
} finally {
lock.writeLock().unlock(); // release write lock
}
}
public String get(String key) {
lock.readLock().lock(); // acquire read lock
try {
return map.get(key); // perform read operation
} finally {
lock.readLock().unlock(); // release read lock
}
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have a Map object that is accessed by multiple threads. To ensure thread safety and prevent race conditions, we use a ReadWriteLock to control access to the map.&lt;/p>
&lt;p>The put() method acquires a write lock using the writeLock() method, performs a write operation on the map, and then releases the write lock using the unlock() method.&lt;/p>
&lt;p>The get() method acquires a read lock using the readLock() method, performs a read operation on the map, and then releases the read lock using the unlock() method.&lt;/p>
&lt;p>With this approach, multiple threads can simultaneously read from the map, but only one thread can write to the map at a time. This can significantly improve performance in scenarios where reads are much more frequent than writes.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>7. Volatile Keyword&lt;/strong>&lt;/p>
&lt;p>In Java, the volatile keyword is used as a modifier to indicate that a variable&amp;rsquo;s value may be modified by multiple threads at the same time.&lt;/p>
&lt;p>When a variable is marked as volatile, the JVM ensures that any write to that variable is immediately visible to other threads that may access it. This means that changes made to the variable by one thread will be immediately reflected in the value seen by other threads. Without the volatile keyword, there is no guarantee that changes made by one thread will be immediately visible to another thread, which can lead to hard-to-detect bugs.&lt;/p>
&lt;p>The volatile keyword can be used with any primitive type, as well as with references to objects. However, it&amp;rsquo;s important to note that using volatile does not provide atomicity, which means that if multiple threads try to modify the same variable at the same time, race conditions and inconsistencies can still occur.&lt;/p>
&lt;p>In general, the volatile keyword should only be used when there is a specific need for multiple threads to access the same variable, and the programmer is sure that the volatile variable will be accessed in a safe and consistent way.&lt;/p>
&lt;p>Here&amp;rsquo;s an example to illustrate the use of volatile keyword in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">public class Counter {
private volatile int count;
public synchronized void increment() {
count++;
}
public int getCount() {
return count;
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have a Counter class with a private volatile integer field called count. The increment() method is used to increment the value of count by one, and the getCount() method returns the current value of count.&lt;/p>
&lt;p>Without the volatile keyword, there is no guarantee that changes made to count by one thread will be immediately visible to another thread. However, since count is marked as volatile, the JVM ensures that any write to count is immediately visible to other threads that may access it.&lt;/p>
&lt;p>Consider the following example usage of the Counter class by multiple threads:&lt;/p>
&lt;pre>&lt;code class="language-java">public class Main {
public static void main(String[] args) {
Counter counter = new Counter();
Thread thread1 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 10000; i++) {
counter.increment();
}
});
Thread thread2 = new Thread(() -&amp;gt; {
for (int i = 0; i &amp;lt; 10000; i++) {
counter.increment();
}
});
thread1.start();
thread2.start();
try {
thread1.join();
thread2.join();
} catch (InterruptedException e) {
e.printStackTrace();
}
System.out.println(&amp;quot;Final count: &amp;quot; + counter.getCount());
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we create two threads, thread1 and thread2, which both increment the Counter object&amp;rsquo;s count field 10,000 times. We then wait for both threads to complete using the join() method, and output the final value of count.&lt;/p>
&lt;p>Without the volatile keyword on the count field in the Counter class, there is no guarantee that the final value of count will be 20,000. However, with count marked as volatile, we can be sure that changes made by one thread will be immediately visible to the other thread, and the final value of count will be 20,000.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>8. Deadlocks&lt;/strong>
In Java, a deadlock occurs when two or more threads are blocked, waiting for each other to release the locks they hold. As a result, none of the threads can make progress and the program hangs.&lt;/p>
&lt;p>Here&amp;rsquo;s an example to illustrate how a deadlock can occur in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">public class DeadlockExample {
private Object lock1 = new Object();
private Object lock2 = new Object();
public void method1() {
synchronized (lock1) {
System.out.println(&amp;quot;Acquired lock1 in method1&amp;quot;);
try {
Thread.sleep(1000);
} catch (InterruptedException e) {}
synchronized (lock2) {
System.out.println(&amp;quot;Acquired lock2 in method1&amp;quot;);
}
}
}
public void method2() {
synchronized (lock2) {
System.out.println(&amp;quot;Acquired lock2 in method2&amp;quot;);
try {
Thread.sleep(1000);
} catch (InterruptedException e) {}
synchronized (lock1) {
System.out.println(&amp;quot;Acquired lock1 in method2&amp;quot;);
}
}
}
public static void main(String[] args) {
final DeadlockExample example = new DeadlockExample();
Thread thread1 = new Thread(new Runnable() {
public void run() {
example.method1();
}
});
Thread thread2 = new Thread(new Runnable() {
public void run() {
example.method2();
}
});
thread1.start();
thread2.start();
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, there are two methods, method1() and method2(), which each synchronize on a different lock. The main() method creates two threads that each call one of these methods.&lt;/p>
&lt;p>Now, suppose that thread1 acquires lock1 and then calls method2(), which tries to acquire lock2. At the same time, thread2 has already acquired lock2 and is trying to acquire lock1. Both threads are blocked waiting for the other thread to release its lock, causing a deadlock.&lt;/p>
&lt;p>Deadlock can occur in a concurrent system when the following conditions are met:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Mutual Exclusion: At least one resource is held in a mutually exclusive mode, meaning only one thread can use it at a time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hold and Wait: A thread is holding at least one resource and is waiting to acquire additional resources that are currently held by other threads.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>No Preemption: Resources cannot be preempted or taken away from threads that are holding them. The only way to release a resource is for the thread to voluntarily release it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Circular Wait: A circular chain of threads exists, where each thread is waiting for a resource that is held by the next thread in the chain. In other words, there is a cycle in the resource allocation graph.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>To avoid deadlocks, you can use some techniques like:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Acquire locks in a fixed order.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use timeouts when acquiring locks to avoid indefinitely waiting for a lock.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use tryLock() instead of synchronized blocks to acquire locks in a non-blocking way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use higher-level concurrency utilities like java.util.concurrent classes, which handle synchronization and - locking automatically.&lt;/p>
&lt;/li>
&lt;/ul></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/23/threads/</guid><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Handling Transactions in Microservices</title><link>https://karthikselvam.com/posts/2023/01/23/transactions/</link><description>&lt;p>Handling transactions involving more than one microservice can be challenging since each microservice typically has its own data store and transaction management. However, there are several best practices that can help to ensure consistency and reliability across microservices:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>The Saga pattern&lt;/strong>: This involves breaking the transaction into multiple smaller transactions, each of which is handled by a separate microservice. If a transaction fails, the other services can be rolled back, ensuring that the system remains consistent. Let&amp;rsquo;s say you have a system where a user can place an order that involves multiple microservices. The order might involve checking inventory levels, processing payments, and shipping products. You can use the Saga pattern to handle this transaction by breaking it down into smaller transactions, each handled by a separate microservice. If one of the transactions fails, the other transactions can be rolled back, ensuring that the system remains consistent. For example, the payment service fails to process a payment. The shipping service can be notified to cancel the shipment, and the inventory service can be notified to restock the item. This ensures that the system remains consistent even though one of the transactions failed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Distributed transaction coordinator&lt;/strong>: A distributed transaction coordinator can help to manage transactions across multiple microservices. The coordinator can ensure that all transactions are either committed or rolled back as a single unit, ensuring consistency across the system.For example, you could use a tool like Apache Kafka to implement a distributed transaction coordinator. When a user places an order, the order microservice can publish a message to a Kafka topic. Each microservice that needs to handle the transaction can subscribe to the topic and perform its own transaction. If one of the microservices fails, the coordinator can ensure that all transactions are either committed or rolled back as a single unit, ensuring consistency across the system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Compensating transactions&lt;/strong>: A compensating transaction is a transaction that undoes the effects of a previous transaction. This can be used to handle failures in the system by rolling back the changes made by previous transactions and restoring the system to its previous state.For example, Let&amp;rsquo;s say you have a system where a user can transfer money between accounts. This transaction involves two microservices: one to debit the account and another to credit the account. If the credit service fails, you can use a compensating transaction to handle the failure. The debit service can be notified to reverse the debit transaction, ensuring that the system remains consistent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Event-driven architectures&lt;/strong>: In an event-driven architecture, each microservice publishes events when it completes a transaction. Other microservices can subscribe to these events and use them to trigger their own transactions. This can help to ensure consistency across the system and reduce the risk of failures.For example, Let&amp;rsquo;s say you have a system where a user can place an order that involves multiple microservices. Each microservice can publish an event when it completes a transaction. For example, the inventory service can publish an event when it updates the inventory level, and the shipping service can publish an event when it ships the product. Other microservices can subscribe to these events and use them to trigger their own transactions. This can help to ensure consistency across the system and reduce the risk of failures.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Idempotency&lt;/strong>: Idempotency is the property of a system where performing the same operation multiple times has the same result as performing it once. By designing microservices to be idempotent, you can reduce the risk of failures and ensure consistency across the system.For example, Let&amp;rsquo;s say you have a system where a user can update their profile information. To ensure idempotency, you can design the microservice to only update the profile if the request includes a unique identifier, such as a UUID. If the same request is made multiple times, the microservice will recognize the duplicate request and return the same result as the original request. This ensures that the system remains consistent even if the same request is made multiple times.&lt;/p>
&lt;/li>
&lt;/ol></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/23/transactions/</guid><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Structural Design Patterns</title><link>https://karthikselvam.com/posts/2023/01/23/structural_patterns/</link><description>&lt;p>Structural Design Patterns are design patterns that focus on the composition of classes and objects to form larger structures, without changing their individual behaviors. They help to simplify the relationships between objects and classes in a system, and to make the system more flexible and efficient. Following are some of the commonly used structural design patterns.&lt;/p>
&lt;p>&lt;strong>1. Adapter pattern&lt;/strong> : Adapter pattern is a structural design pattern that allows incompatible classes to work together by converting the interface of one class into another interface that clients expect. This pattern is useful when you have an existing class that cannot be changed, but you need to use it with other classes that have different interfaces.&lt;/p>
&lt;p>Let&amp;rsquo;s consider a car example to explain the Adapter pattern in Java. Suppose we have an existing class called &amp;ldquo;Car&amp;rdquo; that has a method called &amp;ldquo;drive()&amp;rdquo; that takes no arguments and starts the car. We also have another class called &amp;ldquo;Engine&amp;rdquo; that has a method called &amp;ldquo;start()&amp;rdquo; that starts the engine. However, the interfaces of these two classes are not compatible because the &amp;ldquo;drive()&amp;rdquo; method takes no arguments, while the &amp;ldquo;start()&amp;rdquo; method of the Engine class takes an argument.&lt;/p>
&lt;p>To make these classes work together, we can create an adapter class called &amp;ldquo;EngineAdapter&amp;rdquo; that implements the Car interface and uses the Engine class to start the car. The EngineAdapter will have a reference to an Engine object and will use its &amp;ldquo;start()&amp;rdquo; method to start the car when the &amp;ldquo;drive()&amp;rdquo; method is called.&lt;/p>
&lt;p>Here is the example code in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">interface Car {
void drive();
}
class Engine {
void start(String key) {
System.out.println(&amp;quot;Starting engine with key: &amp;quot; + key);
}
}
class EngineAdapter implements Car {
private Engine engine;
public EngineAdapter(Engine engine) {
this.engine = engine;
}
@Override
public void drive() {
engine.start(&amp;quot;ignition key&amp;quot;);
}
}
public class Main {
public static void main(String[] args) {
Engine engine = new Engine();
Car car = new EngineAdapter(engine);
car.drive();
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, the EngineAdapter class adapts the Engine class to the Car interface by implementing the drive() method and using the start() method of the Engine class to start the car. When we call the drive() method on the Car object, it calls the start() method of the Engine object, which starts the car engine.&lt;/p>
&lt;p>In summary, the Adapter pattern allows us to use incompatible classes together by creating an adapter class that implements the required interface and uses the existing class to provide the required functionality.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. Composite pattern&lt;/strong> : Adapter pattern is a structural design pattern that allows incompatible classes to work together by converting the interface of one class into another interface that clients expect. This pattern is useful when you have an existing class that cannot be changed, but you need to use it with other classes that have different interfaces.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/23/structural_patterns/</guid><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Arrays</title><link>https://karthikselvam.com/posts/2023/01/22/arrays/</link><description>&lt;p>In this article, we will solve array-related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. &lt;a href="https://leetcode.com/problems/contains-duplicate/">Contains Duplicate&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">
class Solution {
public boolean containsDuplicate(int[] nums) {
// Use a hash set to keep track of seen elements
HashSet&amp;lt;Integer&amp;gt; seen = new HashSet&amp;lt;&amp;gt;();
for (int num : nums) {
// If we've already seen this element, then we have a duplicate
if (seen.contains(num)) {
return true;
}
// Otherwise, add it to the set
seen.add(num);
}
// If we make it through the loop without finding a duplicate, then there isn't one
return false;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n) We loop through the array of integers once, which takes O(n) time.
The hash set&amp;rsquo;s average time complexity for insertion and lookup is O(1), so the total time complexity of the loop is also O(n).&lt;/p>
&lt;p>Space complexity: O(n) In the worst case, all elements in the input array are distinct and we must store them all in the hash set. The hash set will therefore have a size of n, so the space complexity is O(n).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. &lt;a href="https://leetcode.com/problems/valid-anagram/">Valid Anagram&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public boolean isAnagram(String s, String t) {
// Check if the lengths of the two strings are the same
if (s.length() != t.length()) {
return false;
}
// Create an array to count the occurrences of characters
int[] count = new int[26];
// Iterate over the two strings and update the count array
for (int i = 0; i &amp;lt; s.length(); i++) {
// Increment the count of the character in the first string
count[s.charAt(i) - 'a']++;
// Decrement the count of the character in the second string
count[t.charAt(i) - 'a']--;
}
// Iterate over the count array and check if all the counts are 0
for (int c : count) {
if (c != 0) {
// If any count is non-zero, the two strings are not anagrams
return false;
}
}
// If all counts are 0, the two strings are anagrams
return true;
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the strings, since we iterate over the two strings once.&lt;/p>
&lt;p>Space complexity: O(1), since we use a fixed-size array of size 26 to count the occurrences of characters.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/two-sum/">Two Sum&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public int[] twoSum(int[] nums, int target) {
// Create a hash table to store the indices of each element
Map&amp;lt;Integer, Integer&amp;gt; indexMap = new HashMap&amp;lt;&amp;gt;();
// Iterate over the array
for (int i = 0; i &amp;lt; nums.length; i++) {
// Calculate the complement of the current element
int complement = target - nums[i];
// Check if the complement is in the hash table
if (indexMap.containsKey(complement)) {
// If it is, return the indices of the two numbers
return new int[] { indexMap.get(complement), i };
}
// If the complement is not in the hash table, add the current element and its index
indexMap.put(nums[i], i);
}
// If no two numbers add up to the target, return null
return null;
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the array, since we iterate over the array once.&lt;/p>
&lt;p>Space complexity: O(n), since we may store all n elements of the array in the hash table.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. &lt;a href="https://leetcode.com/problems/group-anagrams/">Group Anagrams&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; groupAnagrams(String[] strs) {
// create a map to store the anagram groups
Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
// iterate through each string in the input array
for (String str : strs) {
// convert the string to a character array
char[] arr = str.toCharArray();
// sort the characters in the array
Arrays.sort(arr);
// create a new string from the sorted characters
String sorted = new String(arr);
// check if the sorted string is already a key in the map
if (!map.containsKey(sorted)) {
// if not, create a new list for this group
map.put(sorted, new ArrayList&amp;lt;&amp;gt;());
}
// add the current string to the appropriate group
map.get(sorted).add(str);
}
// create a list to hold the anagram groups
List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; groups = new ArrayList&amp;lt;&amp;gt;();
// add each group to the list
for (List&amp;lt;String&amp;gt; group : map.values()) {
groups.add(group);
}
// return the list of anagram groups
return groups;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n * k log k), where n is the number of strings in the input array and k is the maximum length of a string in the array. The main loop iterates through each string in the array and sorts its characters, which takes O(k log k) time per string.&lt;/p>
&lt;p>Space complexity: O(n * k), where n is the number of strings in the input array and k is the maximum length of a string in the array. The map can potentially store all n strings, and each string may have up to k characters. Additionally, the list of anagram groups also takes O(n * k) space.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. &lt;a href="https://leetcode.com/problems/product-of-array-except-self/">Product of Array Except Self&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int[] productExceptSelf(int[] nums) {
int n = nums.length;
int[] res = new int[n];
// Initialize the result array with 1
for (int i = 0; i &amp;lt; n; i++) {
res[i] = 1;
}
// Calculate the left products
int left = 1;
for (int i = 1; i &amp;lt; n; i++) {
left *= nums[i - 1];
res[i] *= left;
}
// Calculate the right products
int right = 1;
for (int i = n - 2; i &amp;gt;= 0; i--) {
right *= nums[i + 1];
res[i] *= right;
}
return res;
}
}
&lt;/code>&lt;/pre>
&lt;p>Suppose we have the input array nums = [1, 2, 3, 4]. The goal is to calculate the product of all elements in the array except the current element. In other words, for each element nums[i], we need to calculate the product of all elements except nums[i].&lt;/p>
&lt;p>To solve this problem, we can first initialize the result array res with all ones, because the product of any number with one is the number itself. So, res = [1, 1, 1, 1].&lt;/p>
&lt;p>Next, we traverse the array from left to right and calculate the product of all elements to the left of each element. For the first element, there are no elements to the left, so we skip it. For the second element, the product of all elements to the left is simply the first element, so we set res[1] to 1 * 1 = 1. For the third element, the product of all elements to the left is 1 * 2 = 2, so we set res[2] to 1 * 2 = 2. For the fourth element, the product of all elements to the left is 1 * 2 * 3 = 6, so we set res[3] to 1 * 2 * 3 = 6. After this step, res = [1, 1, 2, 6].&lt;/p>
&lt;p>Next, we traverse the array from right to left and calculate the product of all elements to the right of each element. For the last element, there are no elements to the right, so we skip it. For the third element, the product of all elements to the right is simply the fourth element, so we set res[2] to 2 * 4 = 8. For the second element, the product of all elements to the right is 4 * 3 = 12, so we set res[1] to 1 * 12 = 12. For the first element, the product of all elements to the right is 4 * 3 * 2 = 24, so we set res[0] to 1 * 24 = 24. After this step, res = [24, 12, 8, 6].&lt;/p>
&lt;p>Thus, the output for the input array nums = [1, 2, 3, 4] is [24, 12, 8, 6], which is the product of all elements in the array except the current element.&lt;/p>
&lt;p>Time Complexity: O(n) - The solution traverses the array three times, each taking O(n) time. Thus, the overall time complexity is O(n).&lt;/p>
&lt;p>Space Complexity: O(1) - The solution uses only constant space for storing the variables, and the output array is not considered in the space complexity calculation.If we consider the output array in the space complexity calculation, the space complexity would be O(n).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. &lt;a href="https://leetcode.com/problems/top-k-frequent-elements/description/">Top K Frequent Elements&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java"> public int[] topKFrequent(int[] nums, int k) {
HashMap&amp;lt;Integer,Integer&amp;gt; map = new HashMap&amp;lt;Integer,Integer&amp;gt;();
for(int num : nums){
map.put(num,map.getOrDefault(num,0)+1);
}
// Sorting in ascending order
//PriorityQueue&amp;lt;Map.Entry&amp;lt;Integer,Integer&amp;gt;&amp;gt; minHeap = new PriorityQueue&amp;lt;Map.Entry&amp;lt;Integer,Integer&amp;gt;&amp;gt;((e1,e2) -&amp;gt; e1.getValue() - e2.getValue());
PriorityQueue&amp;lt;Map.Entry&amp;lt;Integer,Integer&amp;gt;&amp;gt; maxHeap = new PriorityQueue&amp;lt;Map.Entry&amp;lt;Integer,Integer&amp;gt;&amp;gt;((e1,e2) -&amp;gt; e2.getValue() - e1.getValue());
for(Map.Entry&amp;lt;Integer,Integer&amp;gt; entry : map.entrySet()) {
maxHeap.add(entry) ;
}
int i = 0;
int[] result = new int[k];
while(i &amp;lt; k){
Map.Entry&amp;lt;Integer,Integer&amp;gt; currEntry = maxHeap.poll() ;
result[i] = currEntry.getKey();
i++;
}
return result;
}
&lt;/code>&lt;/pre>
&lt;p>Time Complexity: Building the HashMap takes O(n) time, as we need to iterate through the entire input array.
Building the PriorityQueue takes O(n log k) time. For each element in the HashMap, we perform an operation that takes O(log k) time to add the entry to the priority queue. We do this operation n times, so the total time complexity of building the PriorityQueue is O(n log k). Extracting the top k frequent elements from the PriorityQueue takes O(k log n) time. We perform the poll operation k times, which takes O(log n) time each time. Therefore, the overall time complexity of the topKFrequent method is O(n log k).&lt;/p>
&lt;p>Space Complexity: O(n) because we need to store the frequency of each element in the input array in the HashMap. The size of the HashMap is bounded by the number of distinct elements in the input array, which is at most n. The PriorityQueue can also have at most k elements, so its space complexity is O(k). Combining these two space requirements, the overall space complexity of the topKFrequent method is O(n).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>6. &lt;a href="https://leetcode.com/problems/longest-consecutive-sequence">Longest Consecutive Sequence&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int longestConsecutive(int[] nums) {
if (nums == null || nums.length == 0)
return 0;
HashSet&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
for (int num : nums) {
set.add(num);
}
int longestStreak = 0;
for (int num : nums) {
if (!set.contains(num - 1)) { // Only process if it's the start of a sequence
int currentNum = num;
int currentStreak = 1;
while (set.contains(currentNum + 1)) {
currentNum++;
currentStreak++;
}
longestStreak = Math.max(longestStreak, currentStreak);
}
}
return longestStreak;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: Building the HashSet initially takes O(n) time, as we need to add each element of the array to the HashSet.The subsequent iteration over the array takes O(n) time as well, as we examine each element exactly once. Within the iteration, the while loop that checks for consecutive elements also takes O(n) time in the worst case, but it does not run for each element. It runs only when we encounter the start of a consecutive sequence, which happens relatively infrequently in practice.&lt;/p>
&lt;p>Space complexity: O(n), This is because we use a HashSet to store the elements of the array, which can take up to O(n) space in the worst case if all elements are unique.&lt;/p>
&lt;hr></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/22/arrays/</guid><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Greedy Problems</title><link>https://karthikselvam.com/posts/2023/01/22/greedy/</link><description>&lt;p>In this article, we will solve greedy problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. &lt;a href="https://leetcode.com/problems/jump-game/">Jump Game&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public boolean canJump(int[] nums) {
int lastIndex = nums.length - 1; // set last index as the end of the array
for (int i = nums.length - 2; i &amp;gt;= 0; i--) { // iterate backwards through the array
if (i + nums[i] &amp;gt;= lastIndex) { // check if we can reach the current last index from current index
lastIndex = i; // update last index to current index
}
}
return lastIndex == 0; // check if we can reach the first index
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>if (i + nums[i] &amp;gt;= lastIndex)
&lt;/code>&lt;/pre>
&lt;p>This line checks if we can reach the current lastIndex from the current index i. Here&amp;rsquo;s how it works:&lt;/p>
&lt;ul>
&lt;li>i is the current index we&amp;rsquo;re looking at.&lt;/li>
&lt;li>nums[i] is the maximum number of steps we can take from index i.&lt;/li>
&lt;li>i + nums[i] is the index we would end up at if we were to make a jump of size nums[i] from index i.&lt;/li>
&lt;li>lastIndex is the last index we need to be able to reach.&lt;/li>
&lt;/ul>
&lt;p>Time complexity: O(n) where n is the length of the input array. This is because we only iterate through the input array once.&lt;/p>
&lt;p>Space complexity: O(1) because we only use a constant amount of extra space to store the lastIndex variable.&lt;/p>
&lt;hr></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/22/greedy/</guid><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Intervals</title><link>https://karthikselvam.com/posts/2023/01/22/intervals/</link><description>&lt;p>In this article, we will solve intervals-related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. &lt;a href="https://leetcode.com/problems/merge-intervals/">Merge Intervals&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public int[][] merge(int[][] intervals) {
List&amp;lt;int[]&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
if (intervals.length &amp;lt; 2) {
return intervals;
}
Arrays.sort(intervals, Comparator.comparingInt(a -&amp;gt; a[0]));
int start = intervals[0][0];
int end = intervals[0][1];
for (int i = 1; i &amp;lt; intervals.length; i++) {
if (end &amp;gt;= intervals[i][0]) {
end = Math.max(end, intervals[i][1]);
} else {
result.add(new int[]{start, end});
start = intervals[i][0];
end = intervals[i][1];
}
}
result.add(new int[]{start, end});
return result.toArray(new int[result.size()][]);
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n log n) for the initial sorting of the intervals array, plus O(n) for the loop that iterates over the sorted intervals. Within the loop, the operations Math.max and adding to the result list take constant time. Therefore, the overall time complexity is O(n log n + n) = O(n log n).&lt;/p>
&lt;p>Space complexity: O(n) for the result list, which could potentially store all n intervals if none of them overlap. The intervals array is modified in place, so it does not contribute to the space complexity. Therefore, the overall space complexity is O(n).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. &lt;a href="https://leetcode.com/problems/non-overlapping-intervals/">Non-overlapping Intervals&lt;/a>.&lt;/strong>
One approach to solve this problem is to use the greedy algorithm. We can first sort the intervals based on their end time. Then, you can iterate through the intervals and keep track of the current end time. If the start time of the current interval is less than the current end time, then it overlaps with the previous interval and needs to be removed. Otherwise, update the current end time to be the end time of the current interval.&lt;/p>
&lt;pre>&lt;code class="language-java"> public int eraseOverlapIntervals(int[][] intervals) {
Arrays.sort(intervals,Comparator.comparingInt(a -&amp;gt; a[1]));
int count = 0;
int end = Integer.MIN_VALUE;
for(int[] interval : intervals){
int start = interval[0];
int currEnd = interval[1];
if(start &amp;lt; end){
count++;
} else{
end = currEnd;
}
}
return count;
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n log n) for the initial sorting of the intervals array, plus O(n) for the loop that iterates over the sorted intervals. Within the loop, the operations Math.max and adding to the result list take constant time. Therefore, the overall time complexity is O(n log n + n) = O(n log n).&lt;/p>
&lt;p>Space complexity: O(1)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/insert-interval/">Insert Interval&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java"> class Solution {
public int[][] insert(int[][] intervals, int[] newInterval) {
List&amp;lt;int[]&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
int i = 0;
// add all intervals before newInterval
while (i &amp;lt; intervals.length &amp;amp;&amp;amp; intervals[i][1] &amp;lt; newInterval[0]) {
result.add(intervals[i]);
i++;
}
// merge intervals that overlap with newInterval
while (i &amp;lt; intervals.length &amp;amp;&amp;amp; intervals[i][0] &amp;lt;= newInterval[1]) {
newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
i++;
}
result.add(newInterval);
// add all remaining intervals
while (i &amp;lt; intervals.length) {
result.add(intervals[i]);
i++;
}
return result.toArray(new int[result.size()][2]);
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), The method iterates through each interval once, which takes O(n) time complexity.&lt;/p>
&lt;p>Space complexity: O(n), The method uses an ArrayList to store the resulting intervals, which can take up to O(n) space complexity in the worst case.&lt;/p>
&lt;hr></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/22/intervals/</guid><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Sliding Window</title><link>https://karthikselvam.com/posts/2023/01/22/sliding_window/</link><description>&lt;p>In this article, we will solve sliding window related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. &lt;a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">Best Time to Buy and Sell Stock&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int maxProfit(int[] prices) {
if (prices == null || prices.length == 0) {
return 0;
}
int minPrice = Integer.MAX_VALUE;
int maxProfit = 0;
for (int price : prices) {
minPrice = Math.min(minPrice, price);
maxProfit = Math.max(maxProfit, price - minPrice);
}
return maxProfit;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the input string.&lt;/p>
&lt;p>Space complexity: O(1)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. &lt;a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">Longest Substring Without Repeating Characters&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int lengthOfLongestSubstring(String s) {
if (s == null || s.length() == 0) {
return 0;
}
Map&amp;lt;Character, Integer&amp;gt; charIndexMap = new HashMap&amp;lt;&amp;gt;();
int maxLength = 0;
int start = 0;
for (int end = 0; end &amp;lt; s.length(); end++) {
char currentChar = s.charAt(end);
if (charIndexMap.containsKey(currentChar)) {
start = Math.max(start, charIndexMap.get(currentChar) + 1);
}
charIndexMap.put(currentChar, end);
maxLength = Math.max(maxLength, end - start + 1);
}
return maxLength;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the input string s.&lt;/p>
&lt;p>Space complexity: O(min(m, n)), where m is the size of the character set and n is the length of the input string s.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">Longest Substring Without Repeating Characters&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int characterReplacement(String s, int k) {
int n = s.length();
int[] count = new int[26];
int maxCount = 0;
int maxLength = 0;
int start = 0;
for (int end = 0; end &amp;lt; n; end++) {
maxCount = Math.max(maxCount, ++count[s.charAt(end) - 'A']);
while (end - start + 1 - maxCount &amp;gt; k) {
count[s.charAt(start) - 'A']--;
start++;
}
maxLength = Math.max(maxLength, end - start + 1);
}
return maxLength;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the input string s.&lt;/p>
&lt;p>Space complexity: O(1), which is constant space.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. &lt;a href="https://leetcode.com/problems/permutation-in-string">Permutation in String&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public class PermutationInString {
public boolean checkInclusion(String s1, String s2) {
if (s1.length() &amp;gt; s2.length()) {
return false;
}
int[] s1Count = new int[26];
int[] s2Count = new int[26];
for (int i = 0; i &amp;lt; s1.length(); i++) {
s1Count[s1.charAt(i) - 'a']++;
s2Count[s2.charAt(i) - 'a']++;
}
for (int i = 0; i &amp;lt; s2.length() - s1.length(); i++) {
if (matches(s1Count, s2Count)) {
return true;
}
s2Count[s2.charAt(i) - 'a']--;
s2Count[s2.charAt(i + s1.length()) - 'a']++;
}
return matches(s1Count, s2Count);
}
private boolean matches(int[] s1Count, int[] s2Count) {
for (int i = 0; i &amp;lt; 26; i++) {
if (s1Count[i] != s2Count[i]) {
return false;
}
}
return true;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the input string s.&lt;/p>
&lt;p>Space complexity: O(1), which is constant space.&lt;/p>
&lt;hr></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/22/sliding_window/</guid><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Two Pointers</title><link>https://karthikselvam.com/posts/2023/01/22/two_pointers/</link><description>&lt;p>In this article, we will solve Two Pointers related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. &lt;a href="https://leetcode.com/problems/valid-palindrome/">Valid Palindrome&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public boolean isPalindrome(String s) {
if (s == null || s.isEmpty()) {
return true; // Empty string is considered a palindrome
}
// Preprocess the string: remove non-alphanumeric characters and convert to lowercase
StringBuilder sb = new StringBuilder();
for (char c : s.toCharArray()) {
if (Character.isLetterOrDigit(c)) {
sb.append(Character.toLowerCase(c));
}
}
String processedString = sb.toString();
// Use two pointers approach to check if the string is a palindrome
int left = 0, right = processedString.length() - 1;
while (left &amp;lt; right) {
if (processedString.charAt(left) != processedString.charAt(right)) {
return false;
}
left++;
right--;
}
return true;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the input string.&lt;/p>
&lt;p>Space complexity: O(n), The space required by the StringBuilder can be at most the same as the input string, which is O(n) in the worst case. The processed string may require additional space, but it is still bounded by the length of the input string, which is O(n). Therefore, the overall space complexity is also O(n).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. &lt;a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">Two Sum II - Input Array Is Sorted&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int[] twoSum(int[] numbers, int target) {
int left = 0;
int right = numbers.length - 1;
while (left &amp;lt; right) {
int sum = numbers[left] + numbers[right];
if (sum == target) {
return new int[]{left + 1, right + 1}; // Indices are 1-based
} else if (sum &amp;lt; target) {
left++;
} else {
right--;
}
}
// If no such pair is found
return new int[]{-1, -1};
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of elements in the array.&lt;/p>
&lt;p>Space complexity: O(1), meaning it uses constant extra space.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/3sum/">3Sum&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; threeSum(int[] nums) {
List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
Arrays.sort(nums); // Sort the array
for (int i = 0; i &amp;lt; nums.length - 2; i++) {
// Avoid duplicates
if (i &amp;gt; 0 &amp;amp;&amp;amp; nums[i] == nums[i - 1]) {
continue;
}
int left = i + 1;
int right = nums.length - 1;
while (left &amp;lt; right) {
int sum = nums[i] + nums[left] + nums[right];
if (sum == 0) {
result.add(Arrays.asList(nums[i], nums[left], nums[right]));
// Avoid duplicates
while (left &amp;lt; right &amp;amp;&amp;amp; nums[left] == nums[left + 1]) {
left++;
}
while (left &amp;lt; right &amp;amp;&amp;amp; nums[right] == nums[right - 1]) {
right--;
}
// Move pointers
left++;
right--;
} else if (sum &amp;lt; 0) {
left++;
} else {
right--;
}
}
}
return result;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n log n), Sorting the array takes O(n log n) time complexity.&lt;/p>
&lt;p>Space complexity: The space complexity of the result list is O(m), where m is the number of unique triplets that sum up to zero.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. &lt;a href="https://leetcode.com/problems/container-with-most-water">Container With Most Water&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int maxArea(int[] height) {
int maxArea = 0;
int left = 0;
int right = height.length - 1;
while (left &amp;lt; right) {
int minHeight = Math.min(height[left], height[right]);
int width = right - left;
int area = width * minHeight;
maxArea = Math.max(maxArea, area);
if (height[left] &amp;lt; height[right]) {
left++;
} else {
right--;
}
}
return maxArea;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the number of elements in the array, the time complexity is O(n).&lt;/p>
&lt;p>Space complexity: O(1)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. &lt;a href="https://leetcode.com/problems/trapping-rain-water/">Trapping Rain Water&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public class TrappingRainWater {
public int trap(int[] height) {
if (height == null || height.length == 0) {
return 0;
}
int n = height.length;
int[] leftMax = new int[n];
int[] rightMax = new int[n];
// Calculate the maximum height of bars to the left of each position
leftMax[0] = height[0];
for (int i = 1; i &amp;lt; n; i++) {
leftMax[i] = Math.max(leftMax[i - 1], height[i]);
}
// Calculate the maximum height of bars to the right of each position
rightMax[n - 1] = height[n - 1];
for (int i = n - 2; i &amp;gt;= 0; i--) {
rightMax[i] = Math.max(rightMax[i + 1], height[i]);
}
// Calculate the trapped water at each position
int totalWater = 0;
for (int i = 0; i &amp;lt; n; i++) {
int minHeight = Math.min(leftMax[i], rightMax[i]);
totalWater += minHeight - height[i];
}
return totalWater;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), Each iteration through the array takes O(n) time, where n is the number of elements in the array.&lt;/p>
&lt;p>Space complexity: O(n), where n is the number of elements in the array.&lt;/p>
&lt;hr></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/22/two_pointers/</guid><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Interview Preparation</title><link>https://karthikselvam.com/posts/2023/01/20/interview_preparation/</link><description>&lt;p>&lt;strong>1. &lt;a href="https://medium.com/paypal-tech/how-to-prepare-for-an-engineering-interview-at-paypal-india-288dd90e4804">PayPal Interview Preparation Guide&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>2. &lt;a href="https://interviewing.io/">Interviewing.io&lt;/a>&lt;/strong>&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/20/interview_preparation/</guid><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate></item></channel></rss>