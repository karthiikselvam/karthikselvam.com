<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Karthik Selvam</title><description/><link>https://karthikselvam.com/</link><language>en</language><copyright>Copyright 2023, Ronalds Vilcins</copyright><lastBuildDate>Wed, 25 Jan 2023 00:00:00 +0000</lastBuildDate><generator>Hugo - gohugo.io</generator><docs>http://cyber.harvard.edu/rss/rss.html</docs><atom:link href="https://ronaldsvilcins.com/atom.xml" rel="self" type="application/atom+xml"/><item><title>Understanding OOP concepts</title><link>https://karthikselvam.com/posts/2023/01/25/oops_concepts/</link><description>&lt;p>&lt;strong>1. What is an Object?&lt;/strong>&lt;/p>
&lt;p>An object is an entity in the real world that possesses state (fields) and behaviors (methods). It represents an instance of a class, occupies space in memory, and can communicate with other objects&lt;/p>
&lt;p>&lt;strong>2. What is a Class?&lt;/strong>&lt;/p>
&lt;p>A class is a programming construct that serves as a template or blueprint for creating objects. Unlike objects, classes do not consume memory. Instead, they define the properties and behaviors of objects that can be instantiated multiple times.&lt;/p>
&lt;p>&lt;strong>3. What is a Abstraction?&lt;/strong>&lt;/p>
&lt;p>Abstraction is the concept of exposing to the user only the relevant information while hiding the unnecessary details. This enables the user to focus on what the application does, rather than how it does it.&lt;/p>
&lt;p>Let&amp;rsquo;s consider a real-life example: a man driving a car. The man knows what each pedal does and what the steering wheel does, but he doesn&amp;rsquo;t know how these things are done internally by the car. He doesn&amp;rsquo;t know about the inner mechanisms that empower these things. This is what abstraction is. In Java, abstraction can be achieved via abstract classes and interfaces.&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Car {
public void speedUp();
public void slowDown();
public void turnRight();
public void turnLeft();
public String getCarType();
}
&lt;/code>&lt;/pre>
&lt;p>Next, each type of car should implement the Car interface and override these methods to provide the implementation of these actions. This implementation is hidden from the user (the man driving the car). For example, the ElectricCar class appears as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public class ElectricCar implements Car {
private final String carType;
public ElectricCar(String carType) {
this.carType = carType;
}
@Override
public void speedUp() {
System.out.println(&amp;quot;Speed up the electric car&amp;quot;);
}
@Override
public void slowDown() {
System.out.println(&amp;quot;Slow down the electric car&amp;quot;);
}
@Override
public void turnRight() {
System.out.println(&amp;quot;Turn right the electric car&amp;quot;);
}
@Override
public void turnLeft() {
System.out.println(&amp;quot;Turn left the electric car&amp;quot;);
}
@Override
public String getCarType() {
return this.carType;
}
}
&lt;/code>&lt;/pre>
&lt;p>The user of this class has access to these public methods without being aware of the implementation:&lt;/p>
&lt;pre>&lt;code>public class Main {
public static void main(String[] args) {
Car electricCar = new ElectricCar(&amp;quot;BMW&amp;quot;);
System.out.println(&amp;quot;Driving the electric car: &amp;quot; + electricCar.getCarType() + &amp;quot;\n&amp;quot;);
electricCar.speedUp();
electricCar.turnLeft();
electricCar.slowDown();
}
}
&lt;/code>&lt;/pre>
&lt;p>The output is listed as follows:&lt;/p>
&lt;pre>&lt;code>Driving the electric car: BMW
Speed up the electric car
Turn left the electric car
Slow down the electric car
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>4. What is a Encapsulation?&lt;/strong>&lt;/p>
&lt;p>Encapsulation is a technique whereby the state of an object is hidden from the outside world, and a set of public methods are exposed for accessing this state. Encapsulation is achieved when each object keeps its state private inside a class. It is known as a data-hiding mechanism, and has several important advantages associated with it, such as enabling loosely coupled, reusable, secure, and easy-to-test code.&lt;/p>
&lt;p>In Java, encapsulation is implemented through the use of access modifiers such as public, private, and protected.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Person {
private String name;
private int age;
// Getter method for name
public String getName() {
return name;
}
// Setter method for name
public void setName(String name) {
this.name = name;
}
// Getter method for age
public int getAge() {
return age;
}
// Setter method for age
public void setAge(int age) {
this.age = age;
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have a Person class that encapsulates the state (name and age) of a person object. The state is hidden from the outside world through the use of private access modifiers on the name and age variables. However, public getter and setter methods (getName(), setName(), getAge(), setAge()) are provided for accessing and modifying the state of the object. This allows us to maintain control over the state of the object, ensuring that it remains valid and consistent at all times, while also providing a well-defined interface for other parts of the program to interact with the object.&lt;/p>
&lt;p>&lt;strong>5. What is a Inheritance ?&lt;/strong>&lt;/p>
&lt;p>Inheritance is a fundamental concept in object-oriented programming, which allows one class (the child or subclass) to inherit properties and methods from another class (the parent or superclass). This helps to promote code reuse, reduce duplication, and make the code more modular and easier to maintain.&lt;/p>
&lt;p>In Java, inheritance is achieved through the use of the &lt;strong>extends&lt;/strong> keyword. The child class inherits all the visible properties and methods of the parent class, which can be overridden or extended as needed.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of inheritance in Java:&lt;/p>
&lt;pre>&lt;code class="language-java">public class Animal {
private String name;
private int age;
public Animal(String name, int age) {
this.name = name;
this.age = age;
}
public void eat() {
System.out.println(name + &amp;quot; is eating.&amp;quot;);
}
public void sleep() {
System.out.println(name + &amp;quot; is sleeping.&amp;quot;);
}
}
public class Cat extends Animal {
public Cat(String name, int age) {
super(name, age);
}
public void meow() {
System.out.println(&amp;quot;Meow!&amp;quot;);
}
@Override
public void sleep() {
System.out.println(getName() + &amp;quot; is curling up and sleeping.&amp;quot;);
}
}
&lt;/code>&lt;/pre>
&lt;p>In this example, we have an Animal class that defines common properties and methods for all animals, such as name and age, and eat() and sleep() methods. The Cat class extends the Animal class, inheriting all its properties and methods, and also adds a new meow() method.&lt;/p>
&lt;p>We can now create a Cat object and call its methods like this:&lt;/p>
&lt;pre>&lt;code>Cat cat = new Cat(&amp;quot;Kitty&amp;quot;, 2);
cat.eat(); // Output: Kitty is eating.
cat.sleep(); // Output: Kitty is curling up and sleeping.
cat.meow(); // Output: Meow!
&lt;/code>&lt;/pre>
&lt;p>In this example, the Cat class has overridden the sleep() method inherited from the Animal class, to provide a more specific implementation for cats. This demonstrates the flexibility and extensibility of inheritance, which allows us to modify the behavior of a class to better fit our needs.&lt;/p>
&lt;p>&lt;strong>6. What is a Polymorphism ?&lt;/strong>&lt;/p>
&lt;p>Polymorphism is a concept in object-oriented programming that enables an object to exhibit different behaviors in certain scenarios. This can be achieved through method overloading, which is a form of compile-time polymorphism, or through method overriding, which is a form of runtime polymorphism and is applicable in the case of an IS-A relationship.&lt;/p>
&lt;p>Polymorphism via method overloading(compile time)&lt;/p>
&lt;pre>&lt;code class="language-java">public class Calculator {
public int add(int a, int b) {
return a + b;
}
public double add(double a, double b) {
return a + b;
}
}
&lt;/code>&lt;/pre>
&lt;p>Polymorphism via method overriding(runtime)&lt;/p>
&lt;pre>&lt;code class="language-java">public class Animal {
public void makeSound() {
System.out.println(&amp;quot;Animal makes a sound&amp;quot;);
}
}
public class Dog extends Animal {
@Override
public void makeSound() {
System.out.println(&amp;quot;Dog barks&amp;quot;);
}
}
public class Cat extends Animal {
@Override
public void makeSound() {
System.out.println(&amp;quot;Cat meows&amp;quot;);
}
}
public class Main {
public static void main(String[] args) {
Animal animal1 = new Dog();
Animal animal2 = new Cat();
animal1.makeSound(); // Output: Dog barks
animal2.makeSound(); // Output: Cat meows
}
}
&lt;/code>&lt;/pre>
&lt;p>In the example above, we have an Animal class and two subclasses, Dog and Cat, that extend it. The makeSound method is overridden in each subclass to produce a different sound. In the Main class, we create an instance of Dog and Cat but assign them to variables of type Animal. When the makeSound method is called on each of these objects, the appropriate overridden version of the method is executed, producing &amp;ldquo;Dog barks&amp;rdquo; and &amp;ldquo;Cat meows&amp;rdquo; as output, respectively. This is an example of polymorphism as the same method is called on objects of different types, but the behavior is different depending on the actual type of the object at runtime.&lt;/p>
&lt;p>&lt;strong>7. What is a Association ?&lt;/strong>&lt;/p>
&lt;p>Association is a concept in object-oriented programming that describes the relationship between two classes that are independent of each other. An association does not have an owner, and it can take different forms, including one-to-one, one-to-many, many-to-one, and many-to-many, depending on the cardinality and multiplicity of the relationship between the two classes.&lt;/p>
&lt;p>Here is an example of association in Java using a one-to-many relationship:&lt;/p>
&lt;pre>&lt;code class="language-java">public class Library {
private List&amp;lt;Book&amp;gt; books;
public Library() {
books = new ArrayList&amp;lt;&amp;gt;();
}
public void addBook(Book book) {
books.add(book);
}
}
public class Book {
private String title;
private String author;
public Book(String title, String author) {
this.title = title;
this.author = author;
}
// getters and setters
}
&lt;/code>&lt;/pre>
&lt;p>In this example, the Library class has an association with the Book class. The Library class has a list of Book objects, and it provides a method addBook() to add a book to the list. This is an example of a one-to-many association because a Library can have many Book objects in its list.&lt;/p>
&lt;p>The Book class, on the other hand, has no knowledge of the Library class. It simply defines the properties of a book such as its title and author. This is an example of unidirectional association.&lt;/p>
&lt;p>&lt;strong>8. What is a Aggregation ?&lt;/strong>&lt;/p>
&lt;p>Aggregation is one of the core concepts of OOP. Mainly, aggregation is a special case of unidirectional association. While an association defines the relationship between two classes independent of one another, aggregation represents a HAS-A relationship between these two classes. In other words, two aggregated objects have their own life cycle, but one of the objects is the owner of the HAS-A relationship. Having their own life cycle means that ending one object will not affect the other object. For example, a TennisPlayer has a Racket. This is a unidirectional association since a Racket cannot have a TennisPlayer. Even if the TennisPlayer dies, the Racket is not affected.&lt;/p>
&lt;p>For example, a TennisPlayer has a Racket. This is a unidirectional association since a Racket cannot have a TennisPlayer. Even if the TennisPlayer dies, the Racket is not affected.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Racket {
private String type;
private int size;
private int weight;
public Racket(String type, int size, int weight) {
this.type = type;
this.size = size;
this.weight = weight;
}
// getters and setters omitted for brevity
}
&lt;/code>&lt;/pre>
&lt;p>A TennisPlayer HAS-A Racket. Therefore, the TennisPlayer class must be capable of receiving a Racket as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public class TennisPlayer {
private String name;
private Racket racket;
public TennisPlayer(String name, Racket racket) {
this.name = name;
this.racket = racket
}
// getters and setters omitted for brevity
}
&lt;/code>&lt;/pre>
&lt;p>Next, we create a Racket and a TennisPlayer that uses this Racket:&lt;/p>
&lt;pre>&lt;code class="language-java">public static void main(String[] args) {
Racket racket = new Racket(&amp;quot;Babolat Pure Aero&amp;quot;, 100, 300);
TennisPlayer player = new TennisPlayer(&amp;quot;Rafael Nadal&amp;quot;, racket);
System.out.println(&amp;quot;Player &amp;quot; + player.getName() + &amp;quot; plays with &amp;quot; + player.getRacket().getType());
}
&lt;/code>&lt;/pre>
&lt;p>The output is as follows:&lt;/p>
&lt;pre>&lt;code>Player Rafael Nadal plays with Babolat Pure Aero
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>9. What is a Composition ?&lt;/strong>&lt;/p>
&lt;p>Composition is one of the core concepts of OOP. Primarily, composition is a more restrictive case of aggregation. While aggregation represents a HAS-A relationship between two objects having their own life cycle, composition represents a HAS-A relationship that contains an object that cannot exist on its own. In order to highlight this coupling, the HAS-A relationship can be named PART-OF as well. For example, a Car has an Engine. In other words, the engine is PART-OF the car. If the car is destroyed, then the engine is destroyed as well. Composition is said to be better than inheritance because it sustains code reuse and the visibility control of objects.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Engine {
private String type;
private int horsepower;
public Engine(String type, int horsepower) {
this.type = type;
this.horsepower = horsepower;
}
// getters and setters omitted for brevity
}
&lt;/code>&lt;/pre>
&lt;p>Next, we have the Car class. Check out the constructor of this class. Since Engine is part of Car, we create it with the Car.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Car {
private final String name;
private final Engine engine;
public Car(String name) {
this.name = name;
Engine engine = new Engine(&amp;quot;petrol&amp;quot;, 300);
this.engine=engine;
}
public int getHorsepower() {
return engine.getHorsepower();
}
public String getName() {
return name;
}
}
&lt;/code>&lt;/pre>
&lt;p>we can test composition from the main() method as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public static void main(String[] args) {
Car car = new Car(&amp;quot;MyCar&amp;quot;);
System.out.println(&amp;quot;Horsepower: &amp;quot; + car.getHorsepower());
}
&lt;/code>&lt;/pre>
&lt;p>output is as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">Horsepower: 300
&lt;/code>&lt;/pre>
&lt;p>That&amp;rsquo;s it for OOPS.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/25/oops_concepts/</guid><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Understanding SOLID Principles</title><link>https://karthikselvam.com/posts/2023/01/24/solid_principles/</link><description>&lt;p>SOLID is an acronym of the following:&lt;/p>
&lt;ol>
&lt;li>S: Single Responsibility Principle&lt;/li>
&lt;li>O: Open Closed Principle&lt;/li>
&lt;li>L: Liskov&amp;rsquo;s Substitution Principle&lt;/li>
&lt;li>I: Interface Segregation Principle&lt;/li>
&lt;li>D: Dependency Inversion Principle&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>1. What is Single Responsibility Principle ?&lt;/strong>&lt;/p>
&lt;p>S stands for One class should have one, and only one, responsibility. S tells us to write a class for only one goal. As long as we write a class for only one goal, we will sustain high maintainability and visibility control across the application modules. In other words, by sustaining high maintainability, this principle has a significant business impact, and by providing visibility control across the application modules, this principle sustains encapsulation.&lt;/p>
&lt;p>For example, the following class computes the area and converts it to inches:&lt;/p>
&lt;pre>&lt;code class="language-java">public class RectangleAreaCalculator {
private static final double INCH_TERM = 0.0254d;
private final int width;
private final int height;
public RectangleAreaCalculator(int width, int height) {
this.width = width;
this.height = height;
}
public int area() {
return width * height;
}
// this method breaks SRP
public double metersToInches(int area) {
return area / INCH_TERM;
}
}
&lt;/code>&lt;/pre>
&lt;p>The situation can be remedied by removing the metersToInches() method from RectangleAreaCalculator, as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public class RectangleAreaCalculator {
private final int width;
private final int height;
public RectangleAreaCalculator(int width, int height) {
this.width = width;
this.height = height;
}
public int area() {
return width * height;
}
}
&lt;/code>&lt;/pre>
&lt;p>Now, RectangleAreaCalculator does only one thing (it computes the rectangle area), thereby observing the SRP.&lt;/p>
&lt;p>Next, metersToInches() can be extracted in a separate class.&lt;/p>
&lt;pre>&lt;code class="language-java">public class AreaConverter {
private static final double INCH_TERM = 0.0254d;
private static final double FEET_TERM = 0.3048d;
public double metersToInches(int area) {
return area / INCH_TERM;
}
public double metersToFeet(int area) {
return area / FEET_TERM;
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>2. What is Open Closed Principle ?&lt;/strong>&lt;/p>
&lt;p>O stands for Software components should be open for extension, but closed for modification. O sustains the fact that our classes should not contain constraints that will require other developers to modify our classes in order to accomplish their job – other developers should only extend our classes to accomplish their job.&lt;/p>
&lt;p>Each shape will implement the Shape interface. Therefore, the code is pretty straightforward:&lt;/p>
&lt;pre>&lt;code class="language-java"> public interface Shape {
}
public class Rectangle implements Shape {
private final int width;
rivate final int height;
// constructor and getters omitted for brevity
}
public class Circle implements Shape {
private final int radius;
// constructor and getter omitted for brevity
}
&lt;/code>&lt;/pre>
&lt;p>At this point, we can easily use the constructors of these classes to create rectangles and circles of different sizes. Once we have several shapes, we want to sum their areas. For this, we can define an AreaCalculator class as follows:&lt;/p>
&lt;pre>&lt;code class="language-java"> public class AreaCalculator {
private final List&amp;lt;Shape&amp;gt; shapes;
public AreaCalculator(List&amp;lt;Shape&amp;gt; shapes) {
this.shapes = shapes;
}
// adding more shapes requires us to modify this class
// this code is not OCP compliant
public double sum() {
int sum = 0;
for (Shape shape : shapes) {
if (shape.getClass().equals(Circle.class)) {
sum += Math.PI * Math.pow(((Circle) shape).getRadius(), 2);
} else
if(shape.getClass().equals(Rectangle.class)) {
sum += ((Rectangle) shape).getHeight() * ((Rectangle) shape).getWidth();
}
}
return sum;
}
}
&lt;/code>&lt;/pre>
&lt;p>Since each shape has its own formula for area, we require an if-else (or switch) structure to determine the type of shape. Furthermore, if we want to add a new shape (for example, a triangle), we have to modify the AreaCalculator class to add a new if case. This means that the preceding code breaks the OCP.&lt;/p>
&lt;p>The main idea is to extract from AreaCalculator the area formula of each shape in the corresponding Shape class. Hence, the rectangle will compute its area, the circle as well, and so on. To enforce the fact that each shape must calculate its area, we add the area() method to the Shape contract:&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Shape {
public double area();
}
&lt;/code>&lt;/pre>
&lt;p>Next, Rectangle and Circle implements Shape as follows:&lt;/p>
&lt;pre>&lt;code class="language-java"> public class Rectangle implements Shape {
private final int width;
private final int height;
public Rectangle(int width, int height) {
this.width = width;
this.height = height;
}
public double area() {
return width * height;
}
}
public class Circle implements Shape {
private final int radius;
public Circle(int radius) {
this.radius = radius;
}
@Override
public double area() {
return Math.PI * Math.pow(radius, 2);
}
}
&lt;/code>&lt;/pre>
&lt;p>Now, the AreaCalculator can loop the list of shapes and sum the areas by calling the proper area() method.&lt;/p>
&lt;pre>&lt;code class="language-java">public class AreaCalculator {
private final List&amp;lt;Shape&amp;gt; shapes;
public AreaCalculator(List&amp;lt;Shape&amp;gt; shapes) {
this.shapes = shapes;
}
public double sum() {
int sum = 0;
for (Shape shape : shapes) {
sum += shape.area();
}
return sum;
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>3. What is Liskov&amp;rsquo;s Substitution Principle ?&lt;/strong>&lt;/p>
&lt;p>L stands for Derived types must be completely substitutable for their base types. L sustains the fact that objects of subclasses must behave in the same way as the objects of superclasses, so every subclass (or derived class) should be capable of substituting their superclass without any issues. Most of the time, this is useful for runtime-type identification followed by the cast. For example, consider foo(p), where p is of the type T. Then, foo(q) should work fine if q is of the type S and S is a subtype of T.&lt;/p>
&lt;p>Suppose we have a class hierarchy for different shapes, with a base class Shape and two derived classes Circle and Rectangle. Each class has a method area() to calculate the area of the shape.&lt;/p>
&lt;pre>&lt;code class="language-java">public abstract class Shape {
public abstract double area();
}
public class Circle extends Shape {
private double radius;
public Circle(double radius) {
this.radius = radius;
}
@Override
public double area() {
return 3.14 * radius * radius;
}
}
public class Rectangle extends Shape {
private double length;
private double width;
public Rectangle(double length, double width) {
this.length = length;
this.width = width;
}
@Override
public double area() {
return length * width;
}
}
&lt;/code>&lt;/pre>
&lt;p>Now suppose we have a method calculateTotalArea that takes an array of shapes and returns the total area of all the shapes in the array:&lt;/p>
&lt;pre>&lt;code>public static double calculateTotalArea(Shape[] shapes) {
double totalArea = 0.0;
for (Shape shape : shapes) {
totalArea += shape.area();
}
return totalArea;
}
&lt;/code>&lt;/pre>
&lt;p>According to Liskov&amp;rsquo;s Substitution Principle, we should be able to pass an array of Circle or Rectangle objects to this method without any problems, since both classes inherit from the Shape base class and implement the area() method.&lt;/p>
&lt;pre>&lt;code>Circle circle = new Circle(5);
Rectangle rectangle = new Rectangle(3, 4);
Shape[] shapes = {circle, rectangle};
double totalArea = calculateTotalArea(shapes); // returns 83.5
&lt;/code>&lt;/pre>
&lt;p>This demonstrates that the Circle and Rectangle classes can be used interchangeably with the Shape class, without causing any errors or unexpected behavior in the program.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. What is Interface Segregation Principle ?&lt;/strong>&lt;/p>
&lt;p>I stands for the Interface Segregation Principle (ISP). I stands for Clients should not be forced to implement unnecessary methods that they will not use.&lt;/p>
&lt;p>This principle stands for Clients should not be forced to implement unnecessary methods that they will not use. In other words, we should split an interface into two or more interfaces until clients are not forced to implement methods that they will not use. For example, consider the Connection interface, which has three methods: connect(), socket(), and http().&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Connection {
public void socket();
public void http();
public void connect();
}
&lt;/code>&lt;/pre>
&lt;p>WwwPingConnection is a class that pings different websites via HTTP; hence, it requires the http() method, but doesn&amp;rsquo;t need the socket() method. Notice the dummy socket() implementation – since WwwPingConnection implements Connection, it is forced to provide an implementation to the socket() method as well:&lt;/p>
&lt;pre>&lt;code class="language-java">public class WwwPingConnection implements Connection {
private final String www;
public WwwPingConnection(String www) {
this.www = www;
}
@Override
public void http() {
System.out.println(&amp;quot;Setup an HTTP connection to &amp;quot; + www);
}
@Override
public void connect() {
System.out.println(&amp;quot;Connect to &amp;quot; + www);
}
// this method breaks Interface Segregation Principle
@Override
public void socket() {
}
}
&lt;/code>&lt;/pre>
&lt;p>Having an empty implementation or throwing a meaningful exception from methods that are not needed, such as socket(), is a really ugly solution. Check the following code:&lt;/p>
&lt;pre>&lt;code>WwwPingConnection www = new WwwPingConnection 'www.yahoo.com');
www.socket(); // we can call this method!
www.connect();
&lt;/code>&lt;/pre>
&lt;p>What do we expect to obtain from this code? A working code that does nothing, or an exception caused by the connect() method because there is no HTTP endpoint? Or, we can throw an exception from socket() of the type: Socket is not supported!. Then, why is it here?! Hence, it is now time to refactor the code to follow the ISP. In order to comply with the ISP, we need to segregate the Connection interface. Since the connect() method is required by any client, we leave it in this interface.&lt;/p>
&lt;pre>&lt;code class="language-java">public interface Connection {
public void connect();
}
&lt;/code>&lt;/pre>
&lt;p>The http() and socket() methods are distributed in to separate interfaces that extend the Connection interface as follows:&lt;/p>
&lt;pre>&lt;code class="language-java">public interface HttpConnection extends Connection {
public void http();
}
public interface SocketConnection extends Connection {
public void socket();
}
&lt;/code>&lt;/pre>
&lt;p>This time, the WwwPingConnection class can implement only the HttpConnection interface and use the http() method:&lt;/p>
&lt;pre>&lt;code class="language-java">public class WwwPingConnection implements HttpConnection {
private final String www;
public WwwPingConnection(String www) {
this.www = www;
}
@Override
public void http() {
System.out.println(&amp;quot;Setup an HTTP connection to &amp;quot; + www);
}
@Override
public void connect() {
System.out.println(&amp;quot;Connect to &amp;quot; + www);
}
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>5. What is Dependency Inversion Principle ?&lt;/strong>&lt;/p>
&lt;p>D stands for the Dependency Inversion Principle. This principle stands for Depend on abstractions, not on concretions. This means that we should rely on abstract layers to bind concrete modules together instead of having concrete modules that depend on other concrete modules. To accomplish this, all concrete modules should expose abstractions only.&lt;/p>
&lt;p>A database JDBC URL, PostgreSQLJdbcUrl, can be a low-level module, while a class that connects to the database may represent a high-level module, such as ConnectToDatabase#connect().&lt;/p>
&lt;pre>&lt;code class="language-java">public class PostgreSQLJdbcUrl {
private final String dbName;
public PostgreSQLJdbcUrl(String dbName) {
this.dbName = dbName;
}
public String get() {
return &amp;quot;jdbc:// ... &amp;quot; + this.dbName;
}
}
public class ConnectToDatabase {
public void connect(PostgreSQLJdbcUrl postgresql) {
System.out.println(&amp;quot;Connecting to &amp;quot; + postgresql.get());
}
}
&lt;/code>&lt;/pre>
&lt;p>If we create another type of JDBC URL (for example, MySQLJdbcUrl), then we cannot use the preceding connect(PostgreSQLJdbcUrl postgreSQL) method. So, we have to drop this dependency on concrete and create a dependency on abstraction.&lt;/p>
&lt;p>The abstraction can be represented by an interface that should be implemented by each type of JDBC URL&lt;/p>
&lt;pre>&lt;code>public interface JdbcUrl {
public String get();
}
&lt;/code>&lt;/pre>
&lt;p>Next, PostgreSQLJdbcUrl implements JdbcUrl to return a JDBC URL specific to PostgreSQL databases:&lt;/p>
&lt;pre>&lt;code class="language-java">public class PostgreSQLJdbcUrl implements JdbcUrl {
private final String dbName;
public PostgreSQLJdbcUrl(String dbName) {
this.dbName = dbName;
}
@Override
public String get() {
return &amp;quot;jdbc:// ... &amp;quot; + this.dbName;
}
}
&lt;/code>&lt;/pre>
&lt;p>In precisely the same manner, we can write MySQLJdbcUrl, OracleJdbcUrl, and so on. Finally, the ConnectToDatabase#connect() method is dependent on the JdbcUrl abstraction, so it can connect to any JDBC URL that implements this abstraction.&lt;/p>
&lt;pre>&lt;code class="language-java">public class ConnectToDatabase {
public void connect(JdbcUrl jdbcUrl) {
System.out.println(&amp;quot;Connecting to &amp;quot; + jdbcUrl.get());
}
}
&lt;/code>&lt;/pre>
&lt;p>That&amp;rsquo;s it, now you have solid understanding of SOLID principles.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/24/solid_principles/</guid><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Capacity Estimation on the fly</title><link>https://karthikselvam.com/posts/2023/01/23/capacity_estimation/</link><description>&lt;p>Capacity estimation is a crucial component of system design interviews, and it can be quite challenging if one is not adequately prepared. However, with the right approach, it is possible to accurately estimate the storage, bandwidth, and memory/cache requirements needed for a particular system. This article provides a comprehensive framework for capacity estimation, which will enable you to confidently tackle capacity-related questions during system design interviews.&lt;/p>
&lt;p>Typically following estimates are required :&lt;/p>
&lt;ol>
&lt;li>Storage&lt;/li>
&lt;li>Bandwidth&lt;/li>
&lt;li>Memory/Cache&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Assumptions:&lt;/p>
&lt;p>&lt;strong>1. Storage Estimates&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Single character requires 2 bytes, while long and double require 8 bytes of space.&lt;/li>
&lt;li>An average photo takes up 200 KB of space, while a high-quality photo takes up 2 MB of space.&lt;/li>
&lt;li>For videos, we assume 50 MB of space per minute of video.&lt;/li>
&lt;/ul>
&lt;p>Examples:&lt;/p>
&lt;ul>
&lt;li>Social media: tweet can be assumed 140 char then 140*2 bytes = 280 bytes tweet.&lt;/li>
&lt;li>Tiny URL: Average URL length &amp;lt;100 char. Longer URLs needing tiny URL will generally be more than 150 char, lets say 200 char. then each URL assume as 200*2 = 400 bytes&lt;/li>
&lt;li>Database id or price etc field can be double or long so 8 bytes per field.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. Traffic estimates&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>For social media applications like Facebook, Instagram, Twitter we can assume 1 billion total users, with 500 million daily active users.&lt;/li>
&lt;li>A chat application like WhatsApp, and Facebook Messenger, has 500 million total users, with 100 million daily active users.&lt;/li>
&lt;li>For video streaming applications like YouTube, Netflix, and Hulu, we can assume 1 billion total users, with 800 million daily active users.&lt;/li>
&lt;li>For cloud or file storage applications like Google Drive, Dropbox, and Microsoft OneDrive, we can assume 1 billion total users, with 500 million daily active users.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>3. Time Assumptions&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A year has 365 days, so 5 years have 1825 days, which we round up to 2000 days.&lt;/li>
&lt;li>A day has 24 hours, which is 86400 seconds, which we round up to 100,000 seconds.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Capacity Estimation for Social Media application&lt;/strong>&lt;/p>
&lt;p>Assuming each post or tweet has 140 characters, and each character requires 2 bytes, each tweet or post has a size of approximately 300 bytes. Let’s assume 1 billion total users and 500 million daily active users, we can assume that 10 million users post photos daily, with an average size of 200 KB. Using these assumptions, we can calculate the following:&lt;/p>
&lt;p>&lt;strong>Storage&lt;/strong>:
Text data storage: 300 bytes x 500,000,000 = 150,000,000,000 = 150 GB of tweet/post data per day
Photo storage: 200 KB x 10,000,000 = 2,000 GB = 2 TB per day.&lt;/p>
&lt;p>Total storage for 5 years: 150 GB x 2000 days = 300,000 GB = 300 TB for tweet/post data, and 2 TB x 2000 days = 4,000 TB for photos.&lt;/p>
&lt;p>&lt;strong>Bandwidth&lt;/strong>:
Text data bandwidth: 150 GB per day / 100,000 seconds = 1.5 MB per second
Photo bandwidth: 2 TB per day / 100,000 seconds = 200 MB per second&lt;/p>
&lt;p>&lt;strong>Memory/Cache&lt;/strong>:
Assuming we want to cache 20 posts/tweets per user, 300 bytes * 500,000,000 daily users * 20 = 150 GB * 20 = 3000 GB = 3 TB of cache. If one machine/server can keep 150 GB of cache, we need 20 machines/servers for caching.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Capacity Estimation for TinyURL&lt;/strong>&lt;/p>
&lt;p>Assuming the average length of a URL is 100 characters, and each character requires 2 bytes, each URL has a size of approximately 200 bytes. Let’s assume 1 billion total users, 100 million daily active users. So 100 million urls are generated per day. Using these assumptions, we can calculate the following:&lt;/p>
&lt;p>&lt;strong>Storage&lt;/strong>:
URL data storage: 200 bytes x 100,000,000 = 20,000,000,000 = 20 GB per day&lt;/p>
&lt;p>Total storage for 5 years: 20 GB per day x 2000 days = 40,000 GB = 40 TB&lt;/p>
&lt;p>&lt;strong>Bandwidth&lt;/strong>:
URL bandwidth: 20 GB per day / 100,000 seconds = 0.2 MB per second.&lt;/p>
&lt;p>&lt;strong>Memory/Cache&lt;/strong>:
Assuming we want to cache 20 urls per user, 200 bytes * 100,000,000 daily users * 20 = 20 GB * 20 = 400 GB of cache. If one machine/server can keep 150 GB of cache, we need 3 machines/servers for caching.&lt;/p>
&lt;p>The framework outlined above provides a clear approach to tackle capacity estimation problems during interviews.&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/23/capacity_estimation/</guid><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Handling Transactions in Microservices</title><link>https://karthikselvam.com/posts/2023/01/23/transactions/</link><description>&lt;p>Handling transactions involving more than one microservice can be challenging since each microservice typically has its own data store and transaction management. However, there are several best practices that can help to ensure consistency and reliability across microservices:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>The Saga pattern&lt;/strong>: This involves breaking the transaction into multiple smaller transactions, each of which is handled by a separate microservice. If a transaction fails, the other services can be rolled back, ensuring that the system remains consistent. Let&amp;rsquo;s say you have a system where a user can place an order that involves multiple microservices. The order might involve checking inventory levels, processing payments, and shipping products. You can use the Saga pattern to handle this transaction by breaking it down into smaller transactions, each handled by a separate microservice. If one of the transactions fails, the other transactions can be rolled back, ensuring that the system remains consistent. For example, the payment service fails to process a payment. The shipping service can be notified to cancel the shipment, and the inventory service can be notified to restock the item. This ensures that the system remains consistent even though one of the transactions failed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Distributed transaction coordinator&lt;/strong>: A distributed transaction coordinator can help to manage transactions across multiple microservices. The coordinator can ensure that all transactions are either committed or rolled back as a single unit, ensuring consistency across the system.For example, you could use a tool like Apache Kafka to implement a distributed transaction coordinator. When a user places an order, the order microservice can publish a message to a Kafka topic. Each microservice that needs to handle the transaction can subscribe to the topic and perform its own transaction. If one of the microservices fails, the coordinator can ensure that all transactions are either committed or rolled back as a single unit, ensuring consistency across the system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Compensating transactions&lt;/strong>: A compensating transaction is a transaction that undoes the effects of a previous transaction. This can be used to handle failures in the system by rolling back the changes made by previous transactions and restoring the system to its previous state.For example, Let&amp;rsquo;s say you have a system where a user can transfer money between accounts. This transaction involves two microservices: one to debit the account and another to credit the account. If the credit service fails, you can use a compensating transaction to handle the failure. The debit service can be notified to reverse the debit transaction, ensuring that the system remains consistent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Event-driven architectures&lt;/strong>: In an event-driven architecture, each microservice publishes events when it completes a transaction. Other microservices can subscribe to these events and use them to trigger their own transactions. This can help to ensure consistency across the system and reduce the risk of failures.For example, Let&amp;rsquo;s say you have a system where a user can place an order that involves multiple microservices. Each microservice can publish an event when it completes a transaction. For example, the inventory service can publish an event when it updates the inventory level, and the shipping service can publish an event when it ships the product. Other microservices can subscribe to these events and use them to trigger their own transactions. This can help to ensure consistency across the system and reduce the risk of failures.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Idempotency&lt;/strong>: Idempotency is the property of a system where performing the same operation multiple times has the same result as performing it once. By designing microservices to be idempotent, you can reduce the risk of failures and ensure consistency across the system.For example, Let&amp;rsquo;s say you have a system where a user can update their profile information. To ensure idempotency, you can design the microservice to only update the profile if the request includes a unique identifier, such as a UUID. If the same request is made multiple times, the microservice will recognize the duplicate request and return the same result as the original request. This ensures that the system remains consistent even if the same request is made multiple times.&lt;/p>
&lt;/li>
&lt;/ol></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/23/transactions/</guid><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Mastering Arrays</title><link>https://karthikselvam.com/posts/2023/01/22/arrays/</link><description>&lt;p>In this article, we will solve array-related problems that are commonly encountered in interviews.&lt;/p>
&lt;p>&lt;strong>1. &lt;a href="https://leetcode.com/problems/contains-duplicate/">Contains Duplicate&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">
class Solution {
public boolean containsDuplicate(int[] nums) {
// Use a hash set to keep track of seen elements
HashSet&amp;lt;Integer&amp;gt; seen = new HashSet&amp;lt;&amp;gt;();
for (int num : nums) {
// If we've already seen this element, then we have a duplicate
if (seen.contains(num)) {
return true;
}
// Otherwise, add it to the set
seen.add(num);
}
// If we make it through the loop without finding a duplicate, then there isn't one
return false;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n) We loop through the array of integers once, which takes O(n) time.
The hash set&amp;rsquo;s average time complexity for insertion and lookup is O(1), so the total time complexity of the loop is also O(n).&lt;/p>
&lt;p>Space complexity: O(n) In the worst case, all elements in the input array are distinct and we must store them all in the hash set. The hash set will therefore have a size of n, so the space complexity is O(n).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2. &lt;a href="https://leetcode.com/problems/valid-anagram/">Valid Anagram&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public boolean isAnagram(String s, String t) {
// Check if the lengths of the two strings are the same
if (s.length() != t.length()) {
return false;
}
// Create an array to count the occurrences of characters
int[] count = new int[26];
// Iterate over the two strings and update the count array
for (int i = 0; i &amp;lt; s.length(); i++) {
// Increment the count of the character in the first string
count[s.charAt(i) - 'a']++;
// Decrement the count of the character in the second string
count[t.charAt(i) - 'a']--;
}
// Iterate over the count array and check if all the counts are 0
for (int c : count) {
if (c != 0) {
// If any count is non-zero, the two strings are not anagrams
return false;
}
}
// If all counts are 0, the two strings are anagrams
return true;
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the strings, since we iterate over the two strings once.&lt;/p>
&lt;p>Space complexity: O(1), since we use a fixed-size array of size 26 to count the occurrences of characters.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>3. &lt;a href="https://leetcode.com/problems/two-sum/">Two Sum&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">public int[] twoSum(int[] nums, int target) {
// Create a hash table to store the indices of each element
Map&amp;lt;Integer, Integer&amp;gt; indexMap = new HashMap&amp;lt;&amp;gt;();
// Iterate over the array
for (int i = 0; i &amp;lt; nums.length; i++) {
// Calculate the complement of the current element
int complement = target - nums[i];
// Check if the complement is in the hash table
if (indexMap.containsKey(complement)) {
// If it is, return the indices of the two numbers
return new int[] { indexMap.get(complement), i };
}
// If the complement is not in the hash table, add the current element and its index
indexMap.put(nums[i], i);
}
// If no two numbers add up to the target, return null
return null;
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n), where n is the length of the array, since we iterate over the array once.&lt;/p>
&lt;p>Space complexity: O(n), since we may store all n elements of the array in the hash table.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>4. &lt;a href="https://leetcode.com/problems/group-anagrams/">Group Anagrams&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; groupAnagrams(String[] strs) {
// create a map to store the anagram groups
Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
// iterate through each string in the input array
for (String str : strs) {
// convert the string to a character array
char[] arr = str.toCharArray();
// sort the characters in the array
Arrays.sort(arr);
// create a new string from the sorted characters
String sorted = new String(arr);
// check if the sorted string is already a key in the map
if (!map.containsKey(sorted)) {
// if not, create a new list for this group
map.put(sorted, new ArrayList&amp;lt;&amp;gt;());
}
// add the current string to the appropriate group
map.get(sorted).add(str);
}
// create a list to hold the anagram groups
List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; groups = new ArrayList&amp;lt;&amp;gt;();
// add each group to the list
for (List&amp;lt;String&amp;gt; group : map.values()) {
groups.add(group);
}
// return the list of anagram groups
return groups;
}
}
&lt;/code>&lt;/pre>
&lt;p>Time complexity: O(n * k log k), where n is the number of strings in the input array and k is the maximum length of a string in the array. The main loop iterates through each string in the array and sorts its characters, which takes O(k log k) time per string.&lt;/p>
&lt;p>Space complexity: O(n * k), where n is the number of strings in the input array and k is the maximum length of a string in the array. The map can potentially store all n strings, and each string may have up to k characters. Additionally, the list of anagram groups also takes O(n * k) space.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>5. &lt;a href="https://leetcode.com/problems/product-of-array-except-self/">Product of Array Except Self&lt;/a>.&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-java">class Solution {
public int[] productExceptSelf(int[] nums) {
int n = nums.length;
int[] res = new int[n];
// Initialize the result array with 1
for (int i = 0; i &amp;lt; n; i++) {
res[i] = 1;
}
// Calculate the left products
int left = 1;
for (int i = 1; i &amp;lt; n; i++) {
left *= nums[i - 1];
res[i] *= left;
}
// Calculate the right products
int right = 1;
for (int i = n - 2; i &amp;gt;= 0; i--) {
right *= nums[i + 1];
res[i] *= right;
}
return res;
}
}
&lt;/code>&lt;/pre>
&lt;p>Suppose we have the input array nums = [1, 2, 3, 4]. The goal is to calculate the product of all elements in the array except the current element. In other words, for each element nums[i], we need to calculate the product of all elements except nums[i].&lt;/p>
&lt;p>To solve this problem, we can first initialize the result array res with all ones, because the product of any number with one is the number itself. So, res = [1, 1, 1, 1].&lt;/p>
&lt;p>Next, we traverse the array from left to right and calculate the product of all elements to the left of each element. For the first element, there are no elements to the left, so we skip it. For the second element, the product of all elements to the left is simply the first element, so we set res[1] to 1 * 1 = 1. For the third element, the product of all elements to the left is 1 * 2 = 2, so we set res[2] to 1 * 2 = 2. For the fourth element, the product of all elements to the left is 1 * 2 * 3 = 6, so we set res[3] to 1 * 2 * 3 = 6. After this step, res = [1, 1, 2, 6].&lt;/p>
&lt;p>Next, we traverse the array from right to left and calculate the product of all elements to the right of each element. For the last element, there are no elements to the right, so we skip it. For the third element, the product of all elements to the right is simply the fourth element, so we set res[2] to 2 * 4 = 8. For the second element, the product of all elements to the right is 4 * 3 = 12, so we set res[1] to 1 * 12 = 12. For the first element, the product of all elements to the right is 4 * 3 * 2 = 24, so we set res[0] to 1 * 24 = 24. After this step, res = [24, 12, 8, 6].&lt;/p>
&lt;p>Thus, the output for the input array nums = [1, 2, 3, 4] is [24, 12, 8, 6], which is the product of all elements in the array except the current element.&lt;/p>
&lt;p>Time Complexity: O(n) - The solution traverses the array three times, each taking O(n) time. Thus, the overall time complexity is O(n).&lt;/p>
&lt;p>Space Complexity: O(1) - The solution uses only constant space for storing the variables, and the output array is not considered in the space complexity calculation.If we consider the output array in the space complexity calculation, the space complexity would be O(n).&lt;/p></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://karthikselvam.com/posts/2023/01/22/arrays/</guid><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate></item></channel></rss>