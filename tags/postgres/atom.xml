<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>postgres on Karthik Selvam</title><link>https://karthikselvam.com/tags/postgres/</link><description>Recent content in postgres on Karthik Selvam</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://karthikselvam.com/tags/postgres/atom.xml" rel="self" type="application/rss+xml"/><item><title>Deep Dive:PostgreSQL WAL, Replication, and Replication Slots</title><link>https://karthikselvam.com/posts/2025/05/22/interview_preparation/</link><pubDate>Thu, 22 May 2025 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2025/05/22/interview_preparation/</guid><description>PostgreSQL’s reliability and advanced replication features are built on its Write-Ahead Log (WAL) and the mechanisms that manage it. In this post, we’ll go deep into how WAL works, how physical and logical replication use it, and how replication slots ensure data safety and consistency. We’ll also look at the actual C structures and functions that implement these features.
1. Write-Ahead Log (WAL): The Foundation # What is WAL? # WAL is a sequential log of all changes made to the database.</description></item></channel></rss>