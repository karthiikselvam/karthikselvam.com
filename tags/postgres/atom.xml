<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>postgres on Karthik Selvam</title><link>https://karthikselvam.com/tags/postgres/</link><description>Recent content in postgres on Karthik Selvam</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://karthikselvam.com/tags/postgres/atom.xml" rel="self" type="application/rss+xml"/><item><title>Understanding PostgreSQL’s Write-Ahead Logging (WAL)</title><link>https://karthikselvam.com/posts/2025/05/22/interview_preparation/</link><pubDate>Thu, 22 May 2025 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2025/05/22/interview_preparation/</guid><description>PostgreSQL’s Write-Ahead Logging (WAL) is at the heart of its durability and crash recovery. If you’ve ever wondered how PostgreSQL ensures your data is safe—even in the event of a crash—this post will walk you through the architecture, flow, and the actual source code that makes it all work.
High-Level Architecture &amp;amp; Flow of WAL # What is WAL? # WAL is a mechanism that ensures all changes to the database are first recorded in a log before being applied to the data files.</description></item></channel></rss>