<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fundamentals on Karthik Selvam</title><link>https://karthikselvam.com/tags/fundamentals/</link><description>Recent content in fundamentals on Karthik Selvam</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 05 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://karthikselvam.com/tags/fundamentals/atom.xml" rel="self" type="application/rss+xml"/><item><title>System Design Concepts</title><link>https://karthikselvam.com/posts/2023/08/05/system_design_meta/</link><pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/08/05/system_design_meta/</guid><description>1. How to transfer data at large scale ?
Non blocking I/O Buffering and Batching Network Protocols Message Formats Load Balancing Partitioning Consistent Hashing 2. How to aggregate data efficiently ?
Push vs Pull Deduplication Checkpointing Data enrichment Embeded database State management Fallback 3. How to store data reliably ?
Reverse Proxy Coordination service Health checking Peer and service discovery Replication Quorum Availability zone 4. How to retrieve data quickly ?</description></item><item><title>Creational Design Patterns</title><link>https://karthikselvam.com/posts/2023/03/23/creational_patterns/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/03/23/creational_patterns/</guid><description>Creational design patterns solve common problems that arise during the creation of objects. Following are some of the commonly used creational design patterns.
1. Builder pattern : The Builder pattern is a creational design pattern that separates the construction of complex objects from their representation, allowing the same construction process to create different representations. This pattern is especially useful when creating objects that require many steps to initialize, and whose initialization steps are optional or may vary.</description></item><item><title>Awesome Stuff</title><link>https://karthikselvam.com/posts/2023/02/25/awesome_stuff/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/02/25/awesome_stuff/</guid><description>1. Engineering Blogs
2. Java Packages with UML Diagrams</description></item><item><title>Note on Large Scale Deployment</title><link>https://karthikselvam.com/posts/2023/01/27/deployment/</link><pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/27/deployment/</guid><description>Challenges in Large scale deployment # Application Deployment - problems at the application level Infrastructure Deployment - problems faced by hosting the application on the infrastructure Operations - problem that arise during the maintainence of deployment Application Deployment # Typical components of large scale systems:
Web Apps and replicas Microservices and replicas Databases RDBMS and NoSQL Replication and Sharding Message Queues Replication and partitioning Caches Content Storage Log file storage Search &amp;amp; Analytics Directory / LDAP servers Infrastructure Deployment # Things we need to take into considersation for deploying the application at infrastructure level</description></item><item><title>System Performance</title><link>https://karthikselvam.com/posts/2023/01/27/performance/</link><pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/27/performance/</guid><description>Performance # Measure of how fast or responsive a system is under
A given workload A given hardware setup Performance Goals - As we increase workload the performance be stable or should not severely degrade the performance. If we increase hardware capacity the performance should ideally increase.
How to spot performance problems ? Every performance problems is result of some queue building somewhere. Ex: Network socket queue, DB IO queue, OS run queue etc.</description></item><item><title>JVM Profiling</title><link>https://karthikselvam.com/posts/2023/01/25/profiling/</link><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/25/profiling/</guid><description>1. Introduction to JDK Flight Recorder
2. JVM Profiling in Kubernetes with Java Flight Recorder</description></item><item><title>Understanding OOP concepts</title><link>https://karthikselvam.com/posts/2023/01/25/oops_concepts/</link><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/25/oops_concepts/</guid><description>1. What is an Object?
An object is an entity in the real world that possesses state (fields) and behaviors (methods). It represents an instance of a class, occupies space in memory, and can communicate with other objects
2. What is a Class?
A class is a programming construct that serves as a template or blueprint for creating objects. Unlike objects, classes do not consume memory. Instead, they define the properties and behaviors of objects that can be instantiated multiple times.</description></item><item><title>Understanding SOLID Principles</title><link>https://karthikselvam.com/posts/2023/01/24/solid_principles/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/24/solid_principles/</guid><description>SOLID is an acronym of the following:
S: Single Responsibility Principle O: Open Closed Principle L: Liskov&amp;rsquo;s Substitution Principle I: Interface Segregation Principle D: Dependency Inversion Principle 1. What is Single Responsibility Principle ?
S stands for One class should have one, and only one, responsibility. S tells us to write a class for only one goal. As long as we write a class for only one goal, we will sustain high maintainability and visibility control across the application modules.</description></item><item><title>Fundamentals of Multithreading</title><link>https://karthikselvam.com/posts/2023/01/23/threads/</link><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/23/threads/</guid><description>1. Thread creation : In Java, you can create a thread by either extending the Thread class or implementing the Runnable interface. Here&amp;rsquo;s how you can do it:
Extending the Thread class: public class MyThread extends Thread { public void run() { // code to be executed in this thread } } You can create an instance of the MyThread class and start the thread using the start() method:
MyThread myThread = new MyThread(); myThread.</description></item><item><title>Structural Design Patterns</title><link>https://karthikselvam.com/posts/2023/01/23/structural_patterns/</link><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/23/structural_patterns/</guid><description>Structural Design Patterns are design patterns that focus on the composition of classes and objects to form larger structures, without changing their individual behaviors. They help to simplify the relationships between objects and classes in a system, and to make the system more flexible and efficient. Following are some of the commonly used structural design patterns.
1. Adapter pattern : Adapter pattern is a structural design pattern that allows incompatible classes to work together by converting the interface of one class into another interface that clients expect.</description></item><item><title>Interview Preparation</title><link>https://karthikselvam.com/posts/2023/01/20/interview_preparation/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/20/interview_preparation/</guid><description>1. PayPal Interview Preparation Guide
1. Test Setup</description></item></channel></rss>