<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fundamentals on Karthik Selvam</title><link>https://karthikselvam.com/tags/fundamentals/</link><description>Recent content in fundamentals on Karthik Selvam</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://karthikselvam.com/tags/fundamentals/atom.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Keystores, Certificates, and How Secure Communication Works in Java Apps</title><link>https://karthikselvam.com/posts/2025/05/29/secure_comm/</link><pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2025/05/29/secure_comm/</guid><description>If you’re a developer or engineer starting with Java applications, you’ve probably come across terms like keystore, certificate, private key, and truststore. These are crucial when setting up secure communication between your app and others using SSL/TLS.
Let’s break down what these terms mean and how they fit together — no fancy jargon, just simple explanations.
What Is a Keystore? # A keystore is a secure file that stores private keys and certificates your Java app needs to prove its identity and encrypt data.</description></item><item><title>Awesome Stuff</title><link>https://karthikselvam.com/posts/2023/02/25/awesome_stuff/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/02/25/awesome_stuff/</guid><description>1. Engineering Blogs
2. Java Packages with UML Diagrams
3. Java Resources
4. The Architecture of Open Source Applications
5. System Design</description></item><item><title>Fundamentals of Multithreading</title><link>https://karthikselvam.com/posts/2023/01/23/threads/</link><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/23/threads/</guid><description>1. Thread creation : In Java, you can create a thread by either extending the Thread class or implementing the Runnable interface. Here&amp;rsquo;s how you can do it:
Extending the Thread class: public class MyThread extends Thread { public void run() { // code to be executed in this thread } } You can create an instance of the MyThread class and start the thread using the start() method:
MyThread myThread = new MyThread(); myThread.</description></item></channel></rss>