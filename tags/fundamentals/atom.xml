<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fundamentals on Karthik Selvam</title><link>https://karthikselvam.com/tags/fundamentals/</link><description>Recent content in fundamentals on Karthik Selvam</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 25 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://karthikselvam.com/tags/fundamentals/atom.xml" rel="self" type="application/rss+xml"/><item><title>Understanding OOP concepts</title><link>https://karthikselvam.com/posts/2023/01/25/oops_concepts/</link><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/25/oops_concepts/</guid><description>1. What is an Object?
An object is an entity in the real world that possesses state (fields) and behaviors (methods). It represents an instance of a class, occupies space in memory, and can communicate with other objects
2. What is a Class?
A class is a programming construct that serves as a template or blueprint for creating objects. Unlike objects, classes do not consume memory. Instead, they define the properties and behaviors of objects that can be instantiated multiple times.</description></item><item><title>Understanding SOLID Principles</title><link>https://karthikselvam.com/posts/2023/01/24/solid_principles/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/24/solid_principles/</guid><description>SOLID is an acronym of the following:
S: Single Responsibility Principle O: Open Closed Principle L: Liskov&amp;rsquo;s Substitution Principle I: Interface Segregation Principle D: Dependency Inversion Principle 1. What is Single Responsibility Principle ?
S stands for One class should have one, and only one, responsibility. S tells us to write a class for only one goal. As long as we write a class for only one goal, we will sustain high maintainability and visibility control across the application modules.</description></item><item><title>Fundamentals of Multithreading</title><link>https://karthikselvam.com/posts/2023/01/23/threads/</link><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/23/threads/</guid><description>1. Thread creation : In Java, you can create a thread by either extending the Thread class or implementing the Runnable interface. Here&amp;rsquo;s how you can do it:
Extending the Thread class: public class MyThread extends Thread { public void run() { // code to be executed in this thread } } You can create an instance of the MyThread class and start the thread using the start() method:
MyThread myThread = new MyThread(); myThread.</description></item></channel></rss>