<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fundamentals on Karthik Selvam</title><link>https://karthikselvam.com/tags/fundamentals/</link><description>Recent content in fundamentals on Karthik Selvam</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 24 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://karthikselvam.com/tags/fundamentals/atom.xml" rel="self" type="application/rss+xml"/><item><title>Understanding SOLID Principles</title><link>https://karthikselvam.com/posts/2023/01/24/solid_principles/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://karthikselvam.com/posts/2023/01/24/solid_principles/</guid><description>SOLID is an acronym of the following:
S: Single Responsibility Principle O: Open Closed Principle L: Liskov&amp;rsquo;s Substitution Principle I: Interface Segregation Principle D: Dependency Inversion Principle 1. What is Single Responsibility Principle ?
S stands for One class should have one, and only one, responsibility. S tells us to write a class for only one goal. As long as we write a class for only one goal, we will sustain high maintainability and visibility control across the application modules.</description></item></channel></rss>